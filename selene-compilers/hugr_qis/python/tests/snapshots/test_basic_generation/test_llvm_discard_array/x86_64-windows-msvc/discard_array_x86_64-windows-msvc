; ModuleID = 'hugr'
source_filename = "hugr"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-windows-msvc"

@"e_Array inde.2A1CB845.0" = private constant [35 x i8] c"\22EXIT:INT:Array index out of bounds"
@"e_Linear arr.8A243695.0" = private constant [48 x i8] c"/EXIT:INT:Linear array element has not been used"
@"e_Linear arr.27F92A51.0" = private constant [52 x i8] c"3EXIT:INT:Linear array element has already been used"
@e_ArrayIter..ED8B8605.0 = private constant [69 x i8] c"DEXIT:INT:ArrayIter._assert_all_used: array element has not been used"
@"e_No more qu.3B2EEBF0.0" = private constant [47 x i8] c".EXIT:INT:No more qubits available to allocate."

define void @__hugr__.main.1() local_unnamed_addr {
alloca_block:
  %calloc = call dereferenceable_or_null(160) i8* @calloc(i64 1, i64 160)
  %0 = bitcast i8* %calloc to { i1, i64 }*
  br label %loop_body

loop_body:                                        ; preds = %alloca_block, %cond_291_case_1.i
  %"20_2.0" = phi i64 [ %1, %cond_291_case_1.i ], [ 0, %alloca_block ]
  %exitcond.not = icmp eq i64 %"20_2.0", 10
  br i1 %exitcond.not, label %loop_out, label %cond_25_case_1

cond_25_case_1:                                   ; preds = %loop_body
  %1 = add nuw nsw i64 %"20_2.0", 1
  %qalloc.i = tail call i64 @___qalloc()
  %not_max.not.i = icmp eq i64 %qalloc.i, -1
  br i1 %not_max.not.i, label %id_bb.i, label %reset_bb.i

reset_bb.i:                                       ; preds = %cond_25_case_1
  tail call void @___reset(i64 %qalloc.i)
  br label %id_bb.i

id_bb.i:                                          ; preds = %reset_bb.i, %cond_25_case_1
  %2 = insertvalue { i1, i64 } { i1 true, i64 poison }, i64 %qalloc.i, 1
  %3 = select i1 %not_max.not.i, { i1, i64 } { i1 false, i64 poison }, { i1, i64 } %2
  %.fca.0.extract.i = extractvalue { i1, i64 } %3, 0
  br i1 %.fca.0.extract.i, label %cond_291_case_1.i, label %cond_266_case_0.i

cond_266_case_0.i:                                ; preds = %id_bb.i
  tail call void @panic(i32 1001, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @"e_No more qu.3B2EEBF0.0", i64 0, i64 0))
  unreachable

cond_291_case_1.i:                                ; preds = %id_bb.i
  %.fca.1.extract.i = extractvalue { i1, i64 } %3, 1
  %"288_05.fca.1.insert.i" = insertvalue { i1, i64 } { i1 true, i64 poison }, i64 %.fca.1.extract.i, 1
  %4 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %0, i64 %"20_2.0"
  %5 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %4, i64 0, i32 0
  %6 = load i1, i1* %5, align 1
  store { i1, i64 } %"288_05.fca.1.insert.i", { i1, i64 }* %4, align 4
  br i1 %6, label %cond_301_case_1.i, label %loop_body

cond_301_case_1.i:                                ; preds = %cond_291_case_1.i
  tail call void @panic(i32 1001, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @"e_Linear arr.8A243695.0", i64 0, i64 0))
  unreachable

loop_out:                                         ; preds = %loop_body
  %"121.fca.0.insert" = insertvalue { { i1, i64 }*, i64 } poison, { i1, i64 }* %0, 0
  %"121.fca.1.insert" = insertvalue { { i1, i64 }*, i64 } %"121.fca.0.insert", i64 0, 1
  %7 = insertvalue { { { i1, i64 }*, i64 }, i64 } poison, { { i1, i64 }*, i64 } %"121.fca.1.insert", 0
  %"341_023.fca.1.insert146.i" = insertvalue { { { i1, i64 }*, i64 }, i64 } %7, i64 0, 1
  %8 = tail call { i1, { { { { i1, i64 }*, i64 }, i64 }, i64 } } @"__hugr__.$__next__$$t(qubit)$n(10).343"({ { { i1, i64 }*, i64 }, i64 } %"341_023.fca.1.insert146.i")
  %.fca.0.extract97147.i = extractvalue { i1, { { { { i1, i64 }*, i64 }, i64 }, i64 } } %8, 0
  br i1 %.fca.0.extract97147.i, label %cond_457_case_1.i, label %"__hugr__.$discard_array$$n(10).311.exit"

cond_457_case_1.i:                                ; preds = %loop_out, %cond_457_case_1.i
  %9 = phi { i1, { { { { i1, i64 }*, i64 }, i64 }, i64 } } [ %13, %cond_457_case_1.i ], [ %8, %loop_out ]
  %10 = extractvalue { i1, { { { { i1, i64 }*, i64 }, i64 }, i64 } } %9, 1
  %.fca.1.0.0.0.extract.i = extractvalue { { { { i1, i64 }*, i64 }, i64 }, i64 } %10, 0, 0, 0
  %.fca.1.0.0.1.extract.i = extractvalue { { { { i1, i64 }*, i64 }, i64 }, i64 } %10, 0, 0, 1
  %.fca.1.0.1.extract.i = extractvalue { { { { i1, i64 }*, i64 }, i64 }, i64 } %10, 0, 1
  %.fca.1.1.extract.i = extractvalue { { { { i1, i64 }*, i64 }, i64 }, i64 } %10, 1
  %11 = insertvalue { { { i1, i64 }*, i64 }, i64 } poison, { i1, i64 }* %.fca.1.0.0.0.extract.i, 0, 0
  %12 = insertvalue { { { i1, i64 }*, i64 }, i64 } %11, i64 %.fca.1.0.0.1.extract.i, 0, 1
  tail call void @___qfree(i64 %.fca.1.1.extract.i)
  %"341_023.fca.1.insert.i" = insertvalue { { { i1, i64 }*, i64 }, i64 } %12, i64 %.fca.1.0.1.extract.i, 1
  %13 = tail call { i1, { { { { i1, i64 }*, i64 }, i64 }, i64 } } @"__hugr__.$__next__$$t(qubit)$n(10).343"({ { { i1, i64 }*, i64 }, i64 } %"341_023.fca.1.insert.i")
  %.fca.0.extract97.i = extractvalue { i1, { { { { i1, i64 }*, i64 }, i64 }, i64 } } %13, 0
  br i1 %.fca.0.extract97.i, label %cond_457_case_1.i, label %"__hugr__.$discard_array$$n(10).311.exit"

"__hugr__.$discard_array$$n(10).311.exit":        ; preds = %cond_457_case_1.i, %loop_out
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define { i1, i64 } @"__hugr__.$array.__comprehension.init.6$$t(qubit).281"() local_unnamed_addr #0 {
alloca_block:
  ret { i1, i64 } { i1 false, i64 poison }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define { i1, { { i64, i64 }, i64 } } @__hugr__.__next__.52({ i64, i64 } %0) local_unnamed_addr #0 {
alloca_block:
  %.fca.0.extract84 = extractvalue { i64, i64 } %0, 0
  %.fca.1.extract85 = extractvalue { i64, i64 } %0, 1
  %1 = icmp slt i64 %.fca.0.extract84, %.fca.1.extract85
  %2 = add i64 %.fca.0.extract84, 1
  %"040.fca.0.insert" = insertvalue { i1, { { i64, i64 }, i64 } } poison, i1 %1, 0
  %"040.fca.1.0.0.insert" = insertvalue { i1, { { i64, i64 }, i64 } } %"040.fca.0.insert", i64 %2, 1, 0, 0
  %"040.fca.1.0.1.insert" = insertvalue { i1, { { i64, i64 }, i64 } } %"040.fca.1.0.0.insert", i64 %.fca.1.extract85, 1, 0, 1
  %"040.fca.1.1.insert" = insertvalue { i1, { { i64, i64 }, i64 } } %"040.fca.1.0.1.insert", i64 %.fca.0.extract84, 1, 1
  ret { i1, { { i64, i64 }, i64 } } %"040.fca.1.1.insert"
}

define i64 @__hugr__.__tk2_qalloc.270() local_unnamed_addr {
alloca_block:
  %qalloc = tail call i64 @___qalloc()
  %not_max.not = icmp eq i64 %qalloc, -1
  br i1 %not_max.not, label %id_bb, label %reset_bb

reset_bb:                                         ; preds = %alloca_block
  tail call void @___reset(i64 %qalloc)
  br label %id_bb

id_bb:                                            ; preds = %alloca_block, %reset_bb
  %0 = insertvalue { i1, i64 } { i1 true, i64 poison }, i64 %qalloc, 1
  %1 = select i1 %not_max.not, { i1, i64 } { i1 false, i64 poison }, { i1, i64 } %0
  %.fca.0.extract = extractvalue { i1, i64 } %1, 0
  br i1 %.fca.0.extract, label %cond_266_case_1, label %cond_266_case_0

cond_266_case_1:                                  ; preds = %id_bb
  %.fca.1.extract = extractvalue { i1, i64 } %1, 1
  ret i64 %.fca.1.extract

cond_266_case_0:                                  ; preds = %id_bb
  tail call void @panic(i32 1001, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @"e_No more qu.3B2EEBF0.0", i64 0, i64 0))
  unreachable
}

define { { i1, i64 }*, i64 } @"__hugr__.$array.__setitem__.linear.4$$t(qubit)$n(10).285"({ { i1, i64 }*, i64 } returned %0, i64 %1, i64 %2) local_unnamed_addr {
alloca_block:
  %3 = icmp ult i64 %1, 10
  br i1 %3, label %cond_291_case_1, label %cond_291_case_0

cond_291_case_0:                                  ; preds = %alloca_block
  tail call void @panic(i32 1001, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @"e_Array inde.2A1CB845.0", i64 0, i64 0))
  unreachable

cond_291_case_1:                                  ; preds = %alloca_block
  %"288_05.fca.1.insert" = insertvalue { i1, i64 } { i1 true, i64 poison }, i64 %2, 1
  %.fca.1.extract56 = extractvalue { { i1, i64 }*, i64 } %0, 1
  %.fca.0.extract55 = extractvalue { { i1, i64 }*, i64 } %0, 0
  %4 = add i64 %.fca.1.extract56, %1
  %5 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %.fca.0.extract55, i64 %4
  %6 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %5, i64 0, i32 0
  %7 = load i1, i1* %6, align 1
  store { i1, i64 } %"288_05.fca.1.insert", { i1, i64 }* %5, align 4
  br i1 %7, label %cond_301_case_1, label %cond_exit_301

cond_301_case_1:                                  ; preds = %cond_291_case_1
  tail call void @panic(i32 1001, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @"e_Linear arr.8A243695.0", i64 0, i64 0))
  unreachable

cond_exit_301:                                    ; preds = %cond_291_case_1
  ret { { i1, i64 }*, i64 } %0
}

define void @"__hugr__.$discard_array$$n(10).311"({ { i1, i64 }*, i64 } %0) local_unnamed_addr {
alloca_block:
  %1 = insertvalue { { { i1, i64 }*, i64 }, i64 } poison, { { i1, i64 }*, i64 } %0, 0
  %"341_023.fca.1.insert146" = insertvalue { { { i1, i64 }*, i64 }, i64 } %1, i64 0, 1
  %2 = tail call { i1, { { { { i1, i64 }*, i64 }, i64 }, i64 } } @"__hugr__.$__next__$$t(qubit)$n(10).343"({ { { i1, i64 }*, i64 }, i64 } %"341_023.fca.1.insert146")
  %.fca.0.extract97147 = extractvalue { i1, { { { { i1, i64 }*, i64 }, i64 }, i64 } } %2, 0
  br i1 %.fca.0.extract97147, label %cond_457_case_1, label %cond_exit_442

cond_457_case_1:                                  ; preds = %alloca_block, %cond_457_case_1
  %3 = phi { i1, { { { { i1, i64 }*, i64 }, i64 }, i64 } } [ %7, %cond_457_case_1 ], [ %2, %alloca_block ]
  %4 = extractvalue { i1, { { { { i1, i64 }*, i64 }, i64 }, i64 } } %3, 1
  %.fca.1.0.0.0.extract = extractvalue { { { { i1, i64 }*, i64 }, i64 }, i64 } %4, 0, 0, 0
  %.fca.1.0.0.1.extract = extractvalue { { { { i1, i64 }*, i64 }, i64 }, i64 } %4, 0, 0, 1
  %.fca.1.0.1.extract = extractvalue { { { { i1, i64 }*, i64 }, i64 }, i64 } %4, 0, 1
  %.fca.1.1.extract = extractvalue { { { { i1, i64 }*, i64 }, i64 }, i64 } %4, 1
  %5 = insertvalue { { { i1, i64 }*, i64 }, i64 } poison, { i1, i64 }* %.fca.1.0.0.0.extract, 0, 0
  %6 = insertvalue { { { i1, i64 }*, i64 }, i64 } %5, i64 %.fca.1.0.0.1.extract, 0, 1
  tail call void @___qfree(i64 %.fca.1.1.extract)
  %"341_023.fca.1.insert" = insertvalue { { { i1, i64 }*, i64 }, i64 } %6, i64 %.fca.1.0.1.extract, 1
  %7 = tail call { i1, { { { { i1, i64 }*, i64 }, i64 }, i64 } } @"__hugr__.$__next__$$t(qubit)$n(10).343"({ { { i1, i64 }*, i64 }, i64 } %"341_023.fca.1.insert")
  %.fca.0.extract97 = extractvalue { i1, { { { { i1, i64 }*, i64 }, i64 }, i64 } } %7, 0
  br i1 %.fca.0.extract97, label %cond_457_case_1, label %cond_exit_442

cond_exit_442:                                    ; preds = %cond_457_case_1, %alloca_block
  ret void
}

; Function Attrs: noreturn
declare void @panic(i32, i8*) local_unnamed_addr #1

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define { { { i1, i64 }*, i64 }, i64 } @"__hugr__.$__iter__$$t(qubit)$n(10).319"({ { i1, i64 }*, i64 } %0) local_unnamed_addr #0 {
alloca_block:
  %1 = insertvalue { { { i1, i64 }*, i64 }, i64 } poison, { { i1, i64 }*, i64 } %0, 0
  %"012.fca.1.insert" = insertvalue { { { i1, i64 }*, i64 }, i64 } %1, i64 0, 1
  ret { { { i1, i64 }*, i64 }, i64 } %"012.fca.1.insert"
}

define { i1, { { { { i1, i64 }*, i64 }, i64 }, i64 } } @"__hugr__.$__next__$$t(qubit)$n(10).343"({ { { i1, i64 }*, i64 }, i64 } %0) local_unnamed_addr {
alloca_block:
  %.fca.1.extract96 = extractvalue { { { i1, i64 }*, i64 }, i64 } %0, 1
  %1 = extractvalue { { { i1, i64 }*, i64 }, i64 } %0, 0
  %.fca.0.extract80 = extractvalue { { i1, i64 }*, i64 } %1, 0
  %.fca.1.extract81 = extractvalue { { i1, i64 }*, i64 } %1, 1
  %2 = icmp slt i64 %.fca.1.extract96, 10
  br i1 %2, label %6, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.preheader"

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.preheader": ; preds = %alloca_block
  %3 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %.fca.0.extract80, i64 %.fca.1.extract81, i32 0
  %4 = load i1, i1* %3, align 1
  br i1 %4, label %cond_402_case_1.i, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.1"

5:                                                ; preds = %40, %"__hugr__.$array.__getitem__.linear.2$$t(qubit)$n(10).361.exit"
  %"02.sroa.9.0" = phi i64 [ %7, %"__hugr__.$array.__getitem__.linear.2$$t(qubit)$n(10).361.exit" ], [ poison, %40 ]
  %"02.sroa.12.0" = phi i64 [ %.fca.2.1.extract.i, %"__hugr__.$array.__getitem__.linear.2$$t(qubit)$n(10).361.exit" ], [ poison, %40 ]
  %"029.fca.0.insert" = insertvalue { i1, { { { { i1, i64 }*, i64 }, i64 }, i64 } } poison, i1 %2, 0
  %"029.fca.1.0.0.0.insert" = insertvalue { i1, { { { { i1, i64 }*, i64 }, i64 }, i64 } } %"029.fca.0.insert", { i1, i64 }* %.fca.0.extract80, 1, 0, 0, 0
  %"029.fca.1.0.0.1.insert" = insertvalue { i1, { { { { i1, i64 }*, i64 }, i64 }, i64 } } %"029.fca.1.0.0.0.insert", i64 %.fca.1.extract81, 1, 0, 0, 1
  %"029.fca.1.0.1.insert" = insertvalue { i1, { { { { i1, i64 }*, i64 }, i64 }, i64 } } %"029.fca.1.0.0.1.insert", i64 %"02.sroa.9.0", 1, 0, 1
  %"029.fca.1.1.insert" = insertvalue { i1, { { { { i1, i64 }*, i64 }, i64 }, i64 } } %"029.fca.1.0.1.insert", i64 %"02.sroa.12.0", 1, 1
  ret { i1, { { { { i1, i64 }*, i64 }, i64 }, i64 } } %"029.fca.1.1.insert"

6:                                                ; preds = %alloca_block
  %7 = add nsw i64 %.fca.1.extract96, 1
  %8 = icmp ult i64 %.fca.1.extract96, 10
  br i1 %8, label %cond_367_case_1.i, label %cond_367_case_0.i

cond_367_case_0.i:                                ; preds = %6
  tail call void @panic(i32 1001, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @"e_Array inde.2A1CB845.0", i64 0, i64 0))
  unreachable

cond_367_case_1.i:                                ; preds = %6
  %9 = add i64 %.fca.1.extract81, %.fca.1.extract96
  %10 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %.fca.0.extract80, i64 %9
  %11 = load { i1, i64 }, { i1, i64 }* %10, align 4
  %12 = bitcast { i1, i64 }* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %12, i8 0, i64 16, i1 false)
  %.fca.2.0.extract.i = extractvalue { i1, i64 } %11, 0
  br i1 %.fca.2.0.extract.i, label %"__hugr__.$array.__getitem__.linear.2$$t(qubit)$n(10).361.exit", label %cond_377_case_0.i

cond_377_case_0.i:                                ; preds = %cond_367_case_1.i
  tail call void @panic(i32 1001, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @"e_Linear arr.27F92A51.0", i64 0, i64 0))
  unreachable

"__hugr__.$array.__getitem__.linear.2$$t(qubit)$n(10).361.exit": ; preds = %cond_367_case_1.i
  %.fca.2.1.extract.i = extractvalue { i1, i64 } %11, 1
  br label %5

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.1": ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.preheader"
  %13 = add i64 %.fca.1.extract81, 1
  %14 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %.fca.0.extract80, i64 %13, i32 0
  %15 = load i1, i1* %14, align 1
  br i1 %15, label %cond_402_case_1.i, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.2"

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.2": ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.1"
  %16 = add i64 %.fca.1.extract81, 2
  %17 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %.fca.0.extract80, i64 %16, i32 0
  %18 = load i1, i1* %17, align 1
  br i1 %18, label %cond_402_case_1.i, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.3"

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.3": ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.2"
  %19 = add i64 %.fca.1.extract81, 3
  %20 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %.fca.0.extract80, i64 %19, i32 0
  %21 = load i1, i1* %20, align 1
  br i1 %21, label %cond_402_case_1.i, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.4"

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.4": ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.3"
  %22 = add i64 %.fca.1.extract81, 4
  %23 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %.fca.0.extract80, i64 %22, i32 0
  %24 = load i1, i1* %23, align 1
  br i1 %24, label %cond_402_case_1.i, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.5"

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.5": ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.4"
  %25 = add i64 %.fca.1.extract81, 5
  %26 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %.fca.0.extract80, i64 %25, i32 0
  %27 = load i1, i1* %26, align 1
  br i1 %27, label %cond_402_case_1.i, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.6"

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.6": ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.5"
  %28 = add i64 %.fca.1.extract81, 6
  %29 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %.fca.0.extract80, i64 %28, i32 0
  %30 = load i1, i1* %29, align 1
  br i1 %30, label %cond_402_case_1.i, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.7"

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.7": ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.6"
  %31 = add i64 %.fca.1.extract81, 7
  %32 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %.fca.0.extract80, i64 %31, i32 0
  %33 = load i1, i1* %32, align 1
  br i1 %33, label %cond_402_case_1.i, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.8"

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.8": ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.7"
  %34 = add i64 %.fca.1.extract81, 8
  %35 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %.fca.0.extract80, i64 %34, i32 0
  %36 = load i1, i1* %35, align 1
  br i1 %36, label %cond_402_case_1.i, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.9"

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.9": ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.8"
  %37 = add i64 %.fca.1.extract81, 9
  %38 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %.fca.0.extract80, i64 %37, i32 0
  %39 = load i1, i1* %38, align 1
  br i1 %39, label %cond_402_case_1.i, label %40

40:                                               ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.9"
  %41 = bitcast { i1, i64 }* %.fca.0.extract80 to i8*
  tail call void @free(i8* %41)
  br label %5

cond_402_case_1.i:                                ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.9", %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.8", %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.7", %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.6", %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.5", %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.4", %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.3", %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.2", %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.1", %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399.exit.preheader"
  tail call void @panic(i32 1001, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @e_ArrayIter..ED8B8605.0, i64 0, i64 0))
  unreachable
}

declare void @___qfree(i64) local_unnamed_addr

define { i64, { { i1, i64 }*, i64 } } @"__hugr__.$array.__getitem__.linear.2$$t(qubit)$n(10).361"({ { i1, i64 }*, i64 } %0, i64 %1) local_unnamed_addr {
alloca_block:
  %2 = icmp ult i64 %1, 10
  br i1 %2, label %cond_367_case_1, label %cond_367_case_0

cond_367_case_0:                                  ; preds = %alloca_block
  tail call void @panic(i32 1001, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @"e_Array inde.2A1CB845.0", i64 0, i64 0))
  unreachable

cond_367_case_1:                                  ; preds = %alloca_block
  %.fca.1.extract60 = extractvalue { { i1, i64 }*, i64 } %0, 1
  %.fca.0.extract59 = extractvalue { { i1, i64 }*, i64 } %0, 0
  %3 = add i64 %.fca.1.extract60, %1
  %4 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %.fca.0.extract59, i64 %3
  %5 = load { i1, i64 }, { i1, i64 }* %4, align 4
  %6 = bitcast { i1, i64 }* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %6, i8 0, i64 16, i1 false)
  %.fca.2.0.extract = extractvalue { i1, i64 } %5, 0
  br i1 %.fca.2.0.extract, label %cond_377_case_1, label %cond_377_case_0

cond_377_case_1:                                  ; preds = %cond_367_case_1
  %.fca.2.1.extract = extractvalue { i1, i64 } %5, 1
  %mrv = insertvalue { i64, { { i1, i64 }*, i64 } } undef, i64 %.fca.2.1.extract, 0
  %mrv40 = insertvalue { i64, { { i1, i64 }*, i64 } } %mrv, { { i1, i64 }*, i64 } %0, 1
  ret { i64, { { i1, i64 }*, i64 } } %mrv40

cond_377_case_0:                                  ; preds = %cond_367_case_1
  tail call void @panic(i32 1001, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @"e_Linear arr.27F92A51.0", i64 0, i64 0))
  unreachable
}

define {} @"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).399"({ i1, i64 } %0) local_unnamed_addr {
alloca_block:
  %.fca.0.extract = extractvalue { i1, i64 } %0, 0
  br i1 %.fca.0.extract, label %cond_402_case_1, label %cond_exit_402

cond_402_case_1:                                  ; preds = %alloca_block
  tail call void @panic(i32 1001, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @e_ArrayIter..ED8B8605.0, i64 0, i64 0))
  unreachable

cond_exit_402:                                    ; preds = %alloca_block
  ret {} undef
}

; Function Attrs: inaccessiblemem_or_argmemonly mustprogress nounwind willreturn
declare void @free(i8* nocapture noundef) local_unnamed_addr #2

declare i64 @___qalloc() local_unnamed_addr

declare void @___reset(i64) local_unnamed_addr

define i64 @qmain(i64 %0) local_unnamed_addr {
entry:
  tail call void @setup(i64 %0)
  tail call void @__hugr__.main.1()
  %1 = tail call i64 @teardown()
  ret i64 %1
}

declare void @setup(i64) local_unnamed_addr

declare i64 @teardown() local_unnamed_addr

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: inaccessiblememonly nofree nounwind willreturn
declare noalias noundef i8* @calloc(i64 noundef, i64 noundef) local_unnamed_addr #4

attributes #0 = { mustprogress nofree norecurse nosync nounwind readnone willreturn }
attributes #1 = { noreturn }
attributes #2 = { inaccessiblemem_or_argmemonly mustprogress nounwind willreturn }
attributes #3 = { argmemonly nofree nounwind willreturn writeonly }
attributes #4 = { inaccessiblememonly nofree nounwind willreturn }

!name = !{!0}

!0 = !{!"mainlib"}
