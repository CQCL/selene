; ModuleID = 'hugr'
source_filename = "hugr"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-apple-darwin"

@"e_Array inde.2A1CB845.0" = private constant [35 x i8] c"\22EXIT:INT:Array index out of bounds"
@"e_Linear arr.8A243695.0" = private constant [48 x i8] c"/EXIT:INT:Linear array element has not been used"
@"e_Linear arr.27F92A51.0" = private constant [52 x i8] c"3EXIT:INT:Linear array element has already been used"
@e_ArrayIter..ED8B8605.0 = private constant [69 x i8] c"DEXIT:INT:ArrayIter._assert_all_used: array element has not been used"
@"e_No more qu.3B2EEBF0.0" = private constant [47 x i8] c".EXIT:INT:No more qubits available to allocate."

define void @__hugr__.main.1() local_unnamed_addr {
alloca_block:
  br label %cond_33_case_1

cond_33_case_1:                                   ; preds = %alloca_block, %cond_exit_33
  %"25_0.sroa.0.0272" = phi i64 [ 0, %alloca_block ], [ %0, %cond_exit_33 ]
  %"25_1.sroa.95.0271" = phi i64 [ undef, %alloca_block ], [ %.fca.9.1.extract, %cond_exit_33 ]
  %"25_1.sroa.90.0270" = phi i1 [ false, %alloca_block ], [ %.fca.9.0.extract, %cond_exit_33 ]
  %"25_1.sroa.85.0269" = phi i64 [ undef, %alloca_block ], [ %.fca.8.1.extract, %cond_exit_33 ]
  %"25_1.sroa.80.0268" = phi i1 [ false, %alloca_block ], [ %.fca.8.0.extract, %cond_exit_33 ]
  %"25_1.sroa.75.0267" = phi i64 [ undef, %alloca_block ], [ %.fca.7.1.extract, %cond_exit_33 ]
  %"25_1.sroa.70.0266" = phi i1 [ false, %alloca_block ], [ %.fca.7.0.extract, %cond_exit_33 ]
  %"25_1.sroa.65.0265" = phi i64 [ undef, %alloca_block ], [ %.fca.6.1.extract, %cond_exit_33 ]
  %"25_1.sroa.60.0264" = phi i1 [ false, %alloca_block ], [ %.fca.6.0.extract, %cond_exit_33 ]
  %"25_1.sroa.55.0263" = phi i64 [ undef, %alloca_block ], [ %.fca.5.1.extract, %cond_exit_33 ]
  %"25_1.sroa.50.0262" = phi i1 [ false, %alloca_block ], [ %.fca.5.0.extract, %cond_exit_33 ]
  %"25_1.sroa.45.0261" = phi i64 [ undef, %alloca_block ], [ %.fca.4.1.extract, %cond_exit_33 ]
  %"25_1.sroa.40.0260" = phi i1 [ false, %alloca_block ], [ %.fca.4.0.extract, %cond_exit_33 ]
  %"25_1.sroa.35.0259" = phi i64 [ undef, %alloca_block ], [ %.fca.3.1.extract, %cond_exit_33 ]
  %"25_1.sroa.30.0258" = phi i1 [ false, %alloca_block ], [ %.fca.3.0.extract, %cond_exit_33 ]
  %"25_1.sroa.25.0257" = phi i64 [ undef, %alloca_block ], [ %.fca.2.1.extract, %cond_exit_33 ]
  %"25_1.sroa.20.0256" = phi i1 [ false, %alloca_block ], [ %.fca.2.0.extract, %cond_exit_33 ]
  %"25_1.sroa.15.0255" = phi i64 [ undef, %alloca_block ], [ %.fca.1.1.extract59, %cond_exit_33 ]
  %"25_1.sroa.10.0254" = phi i1 [ false, %alloca_block ], [ %.fca.1.0.extract58, %cond_exit_33 ]
  %"25_1.sroa.5.0253" = phi i64 [ undef, %alloca_block ], [ %.fca.0.1.extract, %cond_exit_33 ]
  %"25_1.sroa.0.0252" = phi i1 [ false, %alloca_block ], [ %.fca.0.0.extract, %cond_exit_33 ]
  %0 = add nuw nsw i64 %"25_0.sroa.0.0272", 1
  %"25_111.fca.0.0.insert" = insertvalue [10 x { i1, i64 }] poison, i1 %"25_1.sroa.0.0252", 0, 0
  %"25_111.fca.0.1.insert" = insertvalue [10 x { i1, i64 }] %"25_111.fca.0.0.insert", i64 %"25_1.sroa.5.0253", 0, 1
  %"25_111.fca.1.0.insert" = insertvalue [10 x { i1, i64 }] %"25_111.fca.0.1.insert", i1 %"25_1.sroa.10.0254", 1, 0
  %"25_111.fca.1.1.insert" = insertvalue [10 x { i1, i64 }] %"25_111.fca.1.0.insert", i64 %"25_1.sroa.15.0255", 1, 1
  %"25_111.fca.2.0.insert" = insertvalue [10 x { i1, i64 }] %"25_111.fca.1.1.insert", i1 %"25_1.sroa.20.0256", 2, 0
  %"25_111.fca.2.1.insert" = insertvalue [10 x { i1, i64 }] %"25_111.fca.2.0.insert", i64 %"25_1.sroa.25.0257", 2, 1
  %"25_111.fca.3.0.insert" = insertvalue [10 x { i1, i64 }] %"25_111.fca.2.1.insert", i1 %"25_1.sroa.30.0258", 3, 0
  %"25_111.fca.3.1.insert" = insertvalue [10 x { i1, i64 }] %"25_111.fca.3.0.insert", i64 %"25_1.sroa.35.0259", 3, 1
  %"25_111.fca.4.0.insert" = insertvalue [10 x { i1, i64 }] %"25_111.fca.3.1.insert", i1 %"25_1.sroa.40.0260", 4, 0
  %"25_111.fca.4.1.insert" = insertvalue [10 x { i1, i64 }] %"25_111.fca.4.0.insert", i64 %"25_1.sroa.45.0261", 4, 1
  %"25_111.fca.5.0.insert" = insertvalue [10 x { i1, i64 }] %"25_111.fca.4.1.insert", i1 %"25_1.sroa.50.0262", 5, 0
  %"25_111.fca.5.1.insert" = insertvalue [10 x { i1, i64 }] %"25_111.fca.5.0.insert", i64 %"25_1.sroa.55.0263", 5, 1
  %"25_111.fca.6.0.insert" = insertvalue [10 x { i1, i64 }] %"25_111.fca.5.1.insert", i1 %"25_1.sroa.60.0264", 6, 0
  %"25_111.fca.6.1.insert" = insertvalue [10 x { i1, i64 }] %"25_111.fca.6.0.insert", i64 %"25_1.sroa.65.0265", 6, 1
  %"25_111.fca.7.0.insert" = insertvalue [10 x { i1, i64 }] %"25_111.fca.6.1.insert", i1 %"25_1.sroa.70.0266", 7, 0
  %"25_111.fca.7.1.insert" = insertvalue [10 x { i1, i64 }] %"25_111.fca.7.0.insert", i64 %"25_1.sroa.75.0267", 7, 1
  %"25_111.fca.8.0.insert" = insertvalue [10 x { i1, i64 }] %"25_111.fca.7.1.insert", i1 %"25_1.sroa.80.0268", 8, 0
  %"25_111.fca.8.1.insert" = insertvalue [10 x { i1, i64 }] %"25_111.fca.8.0.insert", i64 %"25_1.sroa.85.0269", 8, 1
  %"25_111.fca.9.0.insert" = insertvalue [10 x { i1, i64 }] %"25_111.fca.8.1.insert", i1 %"25_1.sroa.90.0270", 9, 0
  %"25_111.fca.9.1.insert" = insertvalue [10 x { i1, i64 }] %"25_111.fca.9.0.insert", i64 %"25_1.sroa.95.0271", 9, 1
  %qalloc.i = tail call i64 @___qalloc()
  %not_max.not.i = icmp eq i64 %qalloc.i, -1
  br i1 %not_max.not.i, label %id_bb.i, label %reset_bb.i

reset_bb.i:                                       ; preds = %cond_33_case_1
  tail call void @___reset(i64 %qalloc.i)
  br label %id_bb.i

id_bb.i:                                          ; preds = %reset_bb.i, %cond_33_case_1
  %1 = insertvalue { i1, i64 } { i1 true, i64 poison }, i64 %qalloc.i, 1
  %2 = select i1 %not_max.not.i, { i1, i64 } { i1 false, i64 poison }, { i1, i64 } %1
  %.fca.0.extract.i = extractvalue { i1, i64 } %2, 0
  br i1 %.fca.0.extract.i, label %cond_exit_33, label %cond_212_case_0.i

cond_212_case_0.i:                                ; preds = %id_bb.i
  tail call void @panic(i32 1001, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @"e_No more qu.3B2EEBF0.0", i64 0, i64 0))
  unreachable

cond_exit_33:                                     ; preds = %id_bb.i
  %.fca.1.extract.i = extractvalue { i1, i64 } %2, 1
  %3 = tail call [10 x { i1, i64 }] @"__hugr__.$array.__setitem__.linear.4$$t(qubit)$n(10).281"([10 x { i1, i64 }] %"25_111.fca.9.1.insert", i64 %"25_0.sroa.0.0272", i64 %.fca.1.extract.i)
  %.fca.0.0.extract = extractvalue [10 x { i1, i64 }] %3, 0, 0
  %.fca.0.1.extract = extractvalue [10 x { i1, i64 }] %3, 0, 1
  %.fca.1.0.extract58 = extractvalue [10 x { i1, i64 }] %3, 1, 0
  %.fca.1.1.extract59 = extractvalue [10 x { i1, i64 }] %3, 1, 1
  %.fca.2.0.extract = extractvalue [10 x { i1, i64 }] %3, 2, 0
  %.fca.2.1.extract = extractvalue [10 x { i1, i64 }] %3, 2, 1
  %.fca.3.0.extract = extractvalue [10 x { i1, i64 }] %3, 3, 0
  %.fca.3.1.extract = extractvalue [10 x { i1, i64 }] %3, 3, 1
  %.fca.4.0.extract = extractvalue [10 x { i1, i64 }] %3, 4, 0
  %.fca.4.1.extract = extractvalue [10 x { i1, i64 }] %3, 4, 1
  %.fca.5.0.extract = extractvalue [10 x { i1, i64 }] %3, 5, 0
  %.fca.5.1.extract = extractvalue [10 x { i1, i64 }] %3, 5, 1
  %.fca.6.0.extract = extractvalue [10 x { i1, i64 }] %3, 6, 0
  %.fca.6.1.extract = extractvalue [10 x { i1, i64 }] %3, 6, 1
  %.fca.7.0.extract = extractvalue [10 x { i1, i64 }] %3, 7, 0
  %.fca.7.1.extract = extractvalue [10 x { i1, i64 }] %3, 7, 1
  %.fca.8.0.extract = extractvalue [10 x { i1, i64 }] %3, 8, 0
  %.fca.8.1.extract = extractvalue [10 x { i1, i64 }] %3, 8, 1
  %.fca.9.0.extract = extractvalue [10 x { i1, i64 }] %3, 9, 0
  %.fca.9.1.extract = extractvalue [10 x { i1, i64 }] %3, 9, 1
  %exitcond.not = icmp eq i64 %0, 10
  br i1 %exitcond.not, label %loop_out, label %cond_33_case_1

loop_out:                                         ; preds = %cond_exit_33
  tail call void @"__hugr__.$discard_array$$n(10).307"([10 x { i1, i64 }] %3)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define { i1, i64 } @"__hugr__.$array.__comprehension.init.6$$t(qubit).277"() local_unnamed_addr #0 {
alloca_block:
  ret { i1, i64 } { i1 false, i64 poison }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define { i1, { { i64, i64 }, i64 } } @__hugr__.__next__.28({ i64, i64 } %0) local_unnamed_addr #0 {
alloca_block:
  %.fca.0.extract84 = extractvalue { i64, i64 } %0, 0
  %.fca.1.extract85 = extractvalue { i64, i64 } %0, 1
  %1 = icmp slt i64 %.fca.0.extract84, %.fca.1.extract85
  %2 = add i64 %.fca.0.extract84, 1
  %"040.fca.0.insert" = insertvalue { i1, { { i64, i64 }, i64 } } poison, i1 %1, 0
  %"040.fca.1.0.0.insert" = insertvalue { i1, { { i64, i64 }, i64 } } %"040.fca.0.insert", i64 %2, 1, 0, 0
  %"040.fca.1.0.1.insert" = insertvalue { i1, { { i64, i64 }, i64 } } %"040.fca.1.0.0.insert", i64 %.fca.1.extract85, 1, 0, 1
  %"040.fca.1.1.insert" = insertvalue { i1, { { i64, i64 }, i64 } } %"040.fca.1.0.1.insert", i64 %.fca.0.extract84, 1, 1
  ret { i1, { { i64, i64 }, i64 } } %"040.fca.1.1.insert"
}

define i64 @__hugr__.__tk2_qalloc.218() local_unnamed_addr {
alloca_block:
  %qalloc = tail call i64 @___qalloc()
  %not_max.not = icmp eq i64 %qalloc, -1
  br i1 %not_max.not, label %id_bb, label %reset_bb

reset_bb:                                         ; preds = %alloca_block
  tail call void @___reset(i64 %qalloc)
  br label %id_bb

id_bb:                                            ; preds = %alloca_block, %reset_bb
  %0 = insertvalue { i1, i64 } { i1 true, i64 poison }, i64 %qalloc, 1
  %1 = select i1 %not_max.not, { i1, i64 } { i1 false, i64 poison }, { i1, i64 } %0
  %.fca.0.extract = extractvalue { i1, i64 } %1, 0
  br i1 %.fca.0.extract, label %cond_212_case_1, label %cond_212_case_0

cond_212_case_1:                                  ; preds = %id_bb
  %.fca.1.extract = extractvalue { i1, i64 } %1, 1
  ret i64 %.fca.1.extract

cond_212_case_0:                                  ; preds = %id_bb
  tail call void @panic(i32 1001, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @"e_No more qu.3B2EEBF0.0", i64 0, i64 0))
  unreachable
}

define [10 x { i1, i64 }] @"__hugr__.$array.__setitem__.linear.4$$t(qubit)$n(10).281"([10 x { i1, i64 }] %0, i64 %1, i64 %2) local_unnamed_addr {
alloca_block:
  %3 = icmp ult i64 %1, 10
  br i1 %3, label %cond_287_case_1, label %cond_287_case_0

cond_287_case_0:                                  ; preds = %alloca_block
  tail call void @panic(i32 1001, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @"e_Array inde.2A1CB845.0", i64 0, i64 0))
  unreachable

cond_287_case_1:                                  ; preds = %alloca_block
  %"284_05.fca.1.insert" = insertvalue { i1, i64 } { i1 true, i64 poison }, i64 %2, 1
  %4 = alloca [10 x { i1, i64 }], align 8
  %.repack = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %4, i64 0, i64 0
  %.elt = extractvalue [10 x { i1, i64 }] %0, 0
  store { i1, i64 } %.elt, { i1, i64 }* %.repack, align 8
  %.repack129 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %4, i64 0, i64 1
  %.elt130 = extractvalue [10 x { i1, i64 }] %0, 1
  store { i1, i64 } %.elt130, { i1, i64 }* %.repack129, align 8
  %.repack131 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %4, i64 0, i64 2
  %.elt132 = extractvalue [10 x { i1, i64 }] %0, 2
  store { i1, i64 } %.elt132, { i1, i64 }* %.repack131, align 8
  %.repack133 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %4, i64 0, i64 3
  %.elt134 = extractvalue [10 x { i1, i64 }] %0, 3
  store { i1, i64 } %.elt134, { i1, i64 }* %.repack133, align 8
  %.repack135 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %4, i64 0, i64 4
  %.elt136 = extractvalue [10 x { i1, i64 }] %0, 4
  store { i1, i64 } %.elt136, { i1, i64 }* %.repack135, align 8
  %.repack137 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %4, i64 0, i64 5
  %.elt138 = extractvalue [10 x { i1, i64 }] %0, 5
  store { i1, i64 } %.elt138, { i1, i64 }* %.repack137, align 8
  %.repack139 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %4, i64 0, i64 6
  %.elt140 = extractvalue [10 x { i1, i64 }] %0, 6
  store { i1, i64 } %.elt140, { i1, i64 }* %.repack139, align 8
  %.repack141 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %4, i64 0, i64 7
  %.elt142 = extractvalue [10 x { i1, i64 }] %0, 7
  store { i1, i64 } %.elt142, { i1, i64 }* %.repack141, align 8
  %.repack143 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %4, i64 0, i64 8
  %.elt144 = extractvalue [10 x { i1, i64 }] %0, 8
  store { i1, i64 } %.elt144, { i1, i64 }* %.repack143, align 8
  %.repack145 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %4, i64 0, i64 9
  %.elt146 = extractvalue [10 x { i1, i64 }] %0, 9
  store { i1, i64 } %.elt146, { i1, i64 }* %.repack145, align 8
  %5 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %4, i64 0, i64 %1
  %6 = getelementptr inbounds { i1, i64 }, { i1, i64 }* %5, i64 0, i32 0
  %7 = load i1, i1* %6, align 8
  store { i1, i64 } %"284_05.fca.1.insert", { i1, i64 }* %5, align 8
  %.unpack = load { i1, i64 }, { i1, i64 }* %.repack, align 8
  %.unpack149 = load { i1, i64 }, { i1, i64 }* %.repack129, align 8
  %.unpack151 = load { i1, i64 }, { i1, i64 }* %.repack131, align 8
  %.unpack153 = load { i1, i64 }, { i1, i64 }* %.repack133, align 8
  %.unpack155 = load { i1, i64 }, { i1, i64 }* %.repack135, align 8
  %.unpack157 = load { i1, i64 }, { i1, i64 }* %.repack137, align 8
  %.unpack159 = load { i1, i64 }, { i1, i64 }* %.repack139, align 8
  %.unpack161 = load { i1, i64 }, { i1, i64 }* %.repack141, align 8
  %.unpack163 = load { i1, i64 }, { i1, i64 }* %.repack143, align 8
  %.unpack165 = load { i1, i64 }, { i1, i64 }* %.repack145, align 8
  br i1 %7, label %cond_296_case_1, label %cond_exit_296

cond_296_case_1:                                  ; preds = %cond_287_case_1
  tail call void @panic(i32 1001, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @"e_Linear arr.8A243695.0", i64 0, i64 0))
  unreachable

cond_exit_296:                                    ; preds = %cond_287_case_1
  %.fca.2.9.1.extract = extractvalue { i1, i64 } %.unpack165, 1
  %.fca.2.9.0.extract = extractvalue { i1, i64 } %.unpack165, 0
  %.fca.2.8.1.extract = extractvalue { i1, i64 } %.unpack163, 1
  %.fca.2.8.0.extract = extractvalue { i1, i64 } %.unpack163, 0
  %.fca.2.7.1.extract = extractvalue { i1, i64 } %.unpack161, 1
  %.fca.2.7.0.extract = extractvalue { i1, i64 } %.unpack161, 0
  %.fca.2.6.1.extract = extractvalue { i1, i64 } %.unpack159, 1
  %.fca.2.6.0.extract = extractvalue { i1, i64 } %.unpack159, 0
  %.fca.2.5.1.extract = extractvalue { i1, i64 } %.unpack157, 1
  %.fca.2.5.0.extract = extractvalue { i1, i64 } %.unpack157, 0
  %.fca.2.4.1.extract = extractvalue { i1, i64 } %.unpack155, 1
  %.fca.2.4.0.extract = extractvalue { i1, i64 } %.unpack155, 0
  %.fca.2.3.1.extract = extractvalue { i1, i64 } %.unpack153, 1
  %.fca.2.3.0.extract = extractvalue { i1, i64 } %.unpack153, 0
  %.fca.2.2.1.extract = extractvalue { i1, i64 } %.unpack151, 1
  %.fca.2.2.0.extract = extractvalue { i1, i64 } %.unpack151, 0
  %.fca.2.1.1.extract = extractvalue { i1, i64 } %.unpack149, 1
  %.fca.2.1.0.extract = extractvalue { i1, i64 } %.unpack149, 0
  %.fca.2.0.1.extract = extractvalue { i1, i64 } %.unpack, 1
  %.fca.2.0.0.extract = extractvalue { i1, i64 } %.unpack, 0
  %8 = insertvalue [10 x { i1, i64 }] poison, i1 %.fca.2.0.0.extract, 0, 0
  %9 = insertvalue [10 x { i1, i64 }] %8, i64 %.fca.2.0.1.extract, 0, 1
  %10 = insertvalue [10 x { i1, i64 }] %9, i1 %.fca.2.1.0.extract, 1, 0
  %11 = insertvalue [10 x { i1, i64 }] %10, i64 %.fca.2.1.1.extract, 1, 1
  %12 = insertvalue [10 x { i1, i64 }] %11, i1 %.fca.2.2.0.extract, 2, 0
  %13 = insertvalue [10 x { i1, i64 }] %12, i64 %.fca.2.2.1.extract, 2, 1
  %14 = insertvalue [10 x { i1, i64 }] %13, i1 %.fca.2.3.0.extract, 3, 0
  %15 = insertvalue [10 x { i1, i64 }] %14, i64 %.fca.2.3.1.extract, 3, 1
  %16 = insertvalue [10 x { i1, i64 }] %15, i1 %.fca.2.4.0.extract, 4, 0
  %17 = insertvalue [10 x { i1, i64 }] %16, i64 %.fca.2.4.1.extract, 4, 1
  %18 = insertvalue [10 x { i1, i64 }] %17, i1 %.fca.2.5.0.extract, 5, 0
  %19 = insertvalue [10 x { i1, i64 }] %18, i64 %.fca.2.5.1.extract, 5, 1
  %20 = insertvalue [10 x { i1, i64 }] %19, i1 %.fca.2.6.0.extract, 6, 0
  %21 = insertvalue [10 x { i1, i64 }] %20, i64 %.fca.2.6.1.extract, 6, 1
  %22 = insertvalue [10 x { i1, i64 }] %21, i1 %.fca.2.7.0.extract, 7, 0
  %23 = insertvalue [10 x { i1, i64 }] %22, i64 %.fca.2.7.1.extract, 7, 1
  %24 = insertvalue [10 x { i1, i64 }] %23, i1 %.fca.2.8.0.extract, 8, 0
  %25 = insertvalue [10 x { i1, i64 }] %24, i64 %.fca.2.8.1.extract, 8, 1
  %26 = insertvalue [10 x { i1, i64 }] %25, i1 %.fca.2.9.0.extract, 9, 0
  %27 = insertvalue [10 x { i1, i64 }] %26, i64 %.fca.2.9.1.extract, 9, 1
  ret [10 x { i1, i64 }] %27
}

define void @"__hugr__.$discard_array$$n(10).307"([10 x { i1, i64 }] %0) local_unnamed_addr {
alloca_block:
  %1 = tail call { i64, [10 x { i1, i64 }] } @"__hugr__.$__iter__$$t(qubit)$n(10).315"([10 x { i1, i64 }] %0)
  %2 = extractvalue { i64, [10 x { i1, i64 }] } %1, 1
  br label %3

3:                                                ; preds = %cond_452_case_1, %alloca_block
  %.pn = phi [10 x { i1, i64 }] [ %2, %alloca_block ], [ %46, %cond_452_case_1 ]
  %.pn379 = phi { i64, [10 x { i1, i64 }] } [ %1, %alloca_block ], [ %26, %cond_452_case_1 ]
  %"331_1.sroa.133.0" = extractvalue [10 x { i1, i64 }] %.pn, 9, 1
  %"331_1.sroa.126.0" = extractvalue [10 x { i1, i64 }] %.pn, 9, 0
  %"331_1.sroa.119.0" = extractvalue [10 x { i1, i64 }] %.pn, 8, 1
  %"331_1.sroa.112.0" = extractvalue [10 x { i1, i64 }] %.pn, 8, 0
  %"331_1.sroa.105.0" = extractvalue [10 x { i1, i64 }] %.pn, 7, 1
  %"331_1.sroa.98.0" = extractvalue [10 x { i1, i64 }] %.pn, 7, 0
  %"331_1.sroa.91.0" = extractvalue [10 x { i1, i64 }] %.pn, 6, 1
  %"331_1.sroa.84.0" = extractvalue [10 x { i1, i64 }] %.pn, 6, 0
  %"331_1.sroa.77.0" = extractvalue [10 x { i1, i64 }] %.pn, 5, 1
  %"331_1.sroa.70.0" = extractvalue [10 x { i1, i64 }] %.pn, 5, 0
  %"331_1.sroa.63.0" = extractvalue [10 x { i1, i64 }] %.pn, 4, 1
  %"331_1.sroa.56.0" = extractvalue [10 x { i1, i64 }] %.pn, 4, 0
  %"331_1.sroa.49.0" = extractvalue [10 x { i1, i64 }] %.pn, 3, 1
  %"331_1.sroa.42.0" = extractvalue [10 x { i1, i64 }] %.pn, 3, 0
  %"331_1.sroa.35.0" = extractvalue [10 x { i1, i64 }] %.pn, 2, 1
  %"331_1.sroa.28.0" = extractvalue [10 x { i1, i64 }] %.pn, 2, 0
  %"331_1.sroa.21.0" = extractvalue [10 x { i1, i64 }] %.pn, 1, 1
  %"331_1.sroa.14.0" = extractvalue [10 x { i1, i64 }] %.pn, 1, 0
  %"331_1.sroa.7.0" = extractvalue [10 x { i1, i64 }] %.pn, 0, 1
  %"331_1.sroa.0.0" = extractvalue [10 x { i1, i64 }] %.pn, 0, 0
  %"337_023.fca.1.0.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %.pn379, i1 %"331_1.sroa.0.0", 1, 0, 0
  %"337_023.fca.1.0.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"337_023.fca.1.0.0.insert", i64 %"331_1.sroa.7.0", 1, 0, 1
  %"337_023.fca.1.1.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"337_023.fca.1.0.1.insert", i1 %"331_1.sroa.14.0", 1, 1, 0
  %"337_023.fca.1.1.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"337_023.fca.1.1.0.insert", i64 %"331_1.sroa.21.0", 1, 1, 1
  %"337_023.fca.1.2.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"337_023.fca.1.1.1.insert", i1 %"331_1.sroa.28.0", 1, 2, 0
  %"337_023.fca.1.2.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"337_023.fca.1.2.0.insert", i64 %"331_1.sroa.35.0", 1, 2, 1
  %"337_023.fca.1.3.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"337_023.fca.1.2.1.insert", i1 %"331_1.sroa.42.0", 1, 3, 0
  %"337_023.fca.1.3.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"337_023.fca.1.3.0.insert", i64 %"331_1.sroa.49.0", 1, 3, 1
  %"337_023.fca.1.4.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"337_023.fca.1.3.1.insert", i1 %"331_1.sroa.56.0", 1, 4, 0
  %"337_023.fca.1.4.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"337_023.fca.1.4.0.insert", i64 %"331_1.sroa.63.0", 1, 4, 1
  %"337_023.fca.1.5.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"337_023.fca.1.4.1.insert", i1 %"331_1.sroa.70.0", 1, 5, 0
  %"337_023.fca.1.5.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"337_023.fca.1.5.0.insert", i64 %"331_1.sroa.77.0", 1, 5, 1
  %"337_023.fca.1.6.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"337_023.fca.1.5.1.insert", i1 %"331_1.sroa.84.0", 1, 6, 0
  %"337_023.fca.1.6.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"337_023.fca.1.6.0.insert", i64 %"331_1.sroa.91.0", 1, 6, 1
  %"337_023.fca.1.7.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"337_023.fca.1.6.1.insert", i1 %"331_1.sroa.98.0", 1, 7, 0
  %"337_023.fca.1.7.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"337_023.fca.1.7.0.insert", i64 %"331_1.sroa.105.0", 1, 7, 1
  %"337_023.fca.1.8.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"337_023.fca.1.7.1.insert", i1 %"331_1.sroa.112.0", 1, 8, 0
  %"337_023.fca.1.8.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"337_023.fca.1.8.0.insert", i64 %"331_1.sroa.119.0", 1, 8, 1
  %"337_023.fca.1.9.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"337_023.fca.1.8.1.insert", i1 %"331_1.sroa.126.0", 1, 9, 0
  %"337_023.fca.1.9.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"337_023.fca.1.9.0.insert", i64 %"331_1.sroa.133.0", 1, 9, 1
  %4 = tail call { i1, { { i64, [10 x { i1, i64 }] }, i64 } } @"__hugr__.$__next__$$t(qubit)$n(10).339"({ i64, [10 x { i1, i64 }] } %"337_023.fca.1.9.1.insert")
  %.fca.0.extract142 = extractvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %4, 0
  br i1 %.fca.0.extract142, label %cond_452_case_1, label %cond_exit_438

cond_452_case_1:                                  ; preds = %3
  %5 = extractvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %4, 1
  %.fca.1.0.0.extract118 = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 0
  %.fca.1.0.1.0.0.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 0, 0
  %.fca.1.0.1.0.1.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 0, 1
  %.fca.1.0.1.1.0.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 1, 0
  %.fca.1.0.1.1.1.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 1, 1
  %.fca.1.0.1.2.0.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 2, 0
  %.fca.1.0.1.2.1.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 2, 1
  %.fca.1.0.1.3.0.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 3, 0
  %.fca.1.0.1.3.1.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 3, 1
  %.fca.1.0.1.4.0.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 4, 0
  %.fca.1.0.1.4.1.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 4, 1
  %.fca.1.0.1.5.0.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 5, 0
  %.fca.1.0.1.5.1.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 5, 1
  %.fca.1.0.1.6.0.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 6, 0
  %.fca.1.0.1.6.1.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 6, 1
  %.fca.1.0.1.7.0.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 7, 0
  %.fca.1.0.1.7.1.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 7, 1
  %.fca.1.0.1.8.0.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 8, 0
  %.fca.1.0.1.8.1.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 8, 1
  %.fca.1.0.1.9.0.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 9, 0
  %.fca.1.0.1.9.1.extract = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 0, 1, 9, 1
  %.fca.1.1.extract119 = extractvalue { { i64, [10 x { i1, i64 }] }, i64 } %5, 1
  %6 = insertvalue { i64, [10 x { i1, i64 }] } poison, i64 %.fca.1.0.0.extract118, 0
  %7 = insertvalue { i64, [10 x { i1, i64 }] } %6, i1 %.fca.1.0.1.0.0.extract, 1, 0, 0
  %8 = insertvalue { i64, [10 x { i1, i64 }] } %7, i64 %.fca.1.0.1.0.1.extract, 1, 0, 1
  %9 = insertvalue { i64, [10 x { i1, i64 }] } %8, i1 %.fca.1.0.1.1.0.extract, 1, 1, 0
  %10 = insertvalue { i64, [10 x { i1, i64 }] } %9, i64 %.fca.1.0.1.1.1.extract, 1, 1, 1
  %11 = insertvalue { i64, [10 x { i1, i64 }] } %10, i1 %.fca.1.0.1.2.0.extract, 1, 2, 0
  %12 = insertvalue { i64, [10 x { i1, i64 }] } %11, i64 %.fca.1.0.1.2.1.extract, 1, 2, 1
  %13 = insertvalue { i64, [10 x { i1, i64 }] } %12, i1 %.fca.1.0.1.3.0.extract, 1, 3, 0
  %14 = insertvalue { i64, [10 x { i1, i64 }] } %13, i64 %.fca.1.0.1.3.1.extract, 1, 3, 1
  %15 = insertvalue { i64, [10 x { i1, i64 }] } %14, i1 %.fca.1.0.1.4.0.extract, 1, 4, 0
  %16 = insertvalue { i64, [10 x { i1, i64 }] } %15, i64 %.fca.1.0.1.4.1.extract, 1, 4, 1
  %17 = insertvalue { i64, [10 x { i1, i64 }] } %16, i1 %.fca.1.0.1.5.0.extract, 1, 5, 0
  %18 = insertvalue { i64, [10 x { i1, i64 }] } %17, i64 %.fca.1.0.1.5.1.extract, 1, 5, 1
  %19 = insertvalue { i64, [10 x { i1, i64 }] } %18, i1 %.fca.1.0.1.6.0.extract, 1, 6, 0
  %20 = insertvalue { i64, [10 x { i1, i64 }] } %19, i64 %.fca.1.0.1.6.1.extract, 1, 6, 1
  %21 = insertvalue { i64, [10 x { i1, i64 }] } %20, i1 %.fca.1.0.1.7.0.extract, 1, 7, 0
  %22 = insertvalue { i64, [10 x { i1, i64 }] } %21, i64 %.fca.1.0.1.7.1.extract, 1, 7, 1
  %23 = insertvalue { i64, [10 x { i1, i64 }] } %22, i1 %.fca.1.0.1.8.0.extract, 1, 8, 0
  %24 = insertvalue { i64, [10 x { i1, i64 }] } %23, i64 %.fca.1.0.1.8.1.extract, 1, 8, 1
  %25 = insertvalue { i64, [10 x { i1, i64 }] } %24, i1 %.fca.1.0.1.9.0.extract, 1, 9, 0
  %26 = insertvalue { i64, [10 x { i1, i64 }] } %25, i64 %.fca.1.0.1.9.1.extract, 1, 9, 1
  tail call void @___qfree(i64 %.fca.1.1.extract119)
  %27 = insertvalue [10 x { i1, i64 }] poison, i1 %.fca.1.0.1.0.0.extract, 0, 0
  %28 = insertvalue [10 x { i1, i64 }] %27, i64 %.fca.1.0.1.0.1.extract, 0, 1
  %29 = insertvalue [10 x { i1, i64 }] %28, i1 %.fca.1.0.1.1.0.extract, 1, 0
  %30 = insertvalue [10 x { i1, i64 }] %29, i64 %.fca.1.0.1.1.1.extract, 1, 1
  %31 = insertvalue [10 x { i1, i64 }] %30, i1 %.fca.1.0.1.2.0.extract, 2, 0
  %32 = insertvalue [10 x { i1, i64 }] %31, i64 %.fca.1.0.1.2.1.extract, 2, 1
  %33 = insertvalue [10 x { i1, i64 }] %32, i1 %.fca.1.0.1.3.0.extract, 3, 0
  %34 = insertvalue [10 x { i1, i64 }] %33, i64 %.fca.1.0.1.3.1.extract, 3, 1
  %35 = insertvalue [10 x { i1, i64 }] %34, i1 %.fca.1.0.1.4.0.extract, 4, 0
  %36 = insertvalue [10 x { i1, i64 }] %35, i64 %.fca.1.0.1.4.1.extract, 4, 1
  %37 = insertvalue [10 x { i1, i64 }] %36, i1 %.fca.1.0.1.5.0.extract, 5, 0
  %38 = insertvalue [10 x { i1, i64 }] %37, i64 %.fca.1.0.1.5.1.extract, 5, 1
  %39 = insertvalue [10 x { i1, i64 }] %38, i1 %.fca.1.0.1.6.0.extract, 6, 0
  %40 = insertvalue [10 x { i1, i64 }] %39, i64 %.fca.1.0.1.6.1.extract, 6, 1
  %41 = insertvalue [10 x { i1, i64 }] %40, i1 %.fca.1.0.1.7.0.extract, 7, 0
  %42 = insertvalue [10 x { i1, i64 }] %41, i64 %.fca.1.0.1.7.1.extract, 7, 1
  %43 = insertvalue [10 x { i1, i64 }] %42, i1 %.fca.1.0.1.8.0.extract, 8, 0
  %44 = insertvalue [10 x { i1, i64 }] %43, i64 %.fca.1.0.1.8.1.extract, 8, 1
  %45 = insertvalue [10 x { i1, i64 }] %44, i1 %.fca.1.0.1.9.0.extract, 9, 0
  %46 = insertvalue [10 x { i1, i64 }] %45, i64 %.fca.1.0.1.9.1.extract, 9, 1
  br label %3

cond_exit_438:                                    ; preds = %3
  ret void
}

; Function Attrs: noreturn
declare void @panic(i32, i8*) local_unnamed_addr #1

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define { i64, [10 x { i1, i64 }] } @"__hugr__.$__iter__$$t(qubit)$n(10).315"([10 x { i1, i64 }] %0) local_unnamed_addr #0 {
alloca_block:
  %.fca.1.0.0.extract = extractvalue [10 x { i1, i64 }] %0, 0, 0
  %.fca.1.0.1.extract = extractvalue [10 x { i1, i64 }] %0, 0, 1
  %.fca.1.1.0.extract = extractvalue [10 x { i1, i64 }] %0, 1, 0
  %.fca.1.1.1.extract = extractvalue [10 x { i1, i64 }] %0, 1, 1
  %.fca.1.2.0.extract = extractvalue [10 x { i1, i64 }] %0, 2, 0
  %.fca.1.2.1.extract = extractvalue [10 x { i1, i64 }] %0, 2, 1
  %.fca.1.3.0.extract = extractvalue [10 x { i1, i64 }] %0, 3, 0
  %.fca.1.3.1.extract = extractvalue [10 x { i1, i64 }] %0, 3, 1
  %.fca.1.4.0.extract = extractvalue [10 x { i1, i64 }] %0, 4, 0
  %.fca.1.4.1.extract = extractvalue [10 x { i1, i64 }] %0, 4, 1
  %.fca.1.5.0.extract = extractvalue [10 x { i1, i64 }] %0, 5, 0
  %.fca.1.5.1.extract = extractvalue [10 x { i1, i64 }] %0, 5, 1
  %.fca.1.6.0.extract = extractvalue [10 x { i1, i64 }] %0, 6, 0
  %.fca.1.6.1.extract = extractvalue [10 x { i1, i64 }] %0, 6, 1
  %.fca.1.7.0.extract = extractvalue [10 x { i1, i64 }] %0, 7, 0
  %.fca.1.7.1.extract = extractvalue [10 x { i1, i64 }] %0, 7, 1
  %.fca.1.8.0.extract = extractvalue [10 x { i1, i64 }] %0, 8, 0
  %.fca.1.8.1.extract = extractvalue [10 x { i1, i64 }] %0, 8, 1
  %.fca.1.9.0.extract = extractvalue [10 x { i1, i64 }] %0, 9, 0
  %.fca.1.9.1.extract = extractvalue [10 x { i1, i64 }] %0, 9, 1
  %"324_07.fca.1.0.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } { i64 0, [10 x { i1, i64 }] poison }, i1 %.fca.1.0.0.extract, 1, 0, 0
  %"324_07.fca.1.0.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.0.0.insert", i64 %.fca.1.0.1.extract, 1, 0, 1
  %"324_07.fca.1.1.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.0.1.insert", i1 %.fca.1.1.0.extract, 1, 1, 0
  %"324_07.fca.1.1.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.1.0.insert", i64 %.fca.1.1.1.extract, 1, 1, 1
  %"324_07.fca.1.2.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.1.1.insert", i1 %.fca.1.2.0.extract, 1, 2, 0
  %"324_07.fca.1.2.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.2.0.insert", i64 %.fca.1.2.1.extract, 1, 2, 1
  %"324_07.fca.1.3.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.2.1.insert", i1 %.fca.1.3.0.extract, 1, 3, 0
  %"324_07.fca.1.3.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.3.0.insert", i64 %.fca.1.3.1.extract, 1, 3, 1
  %"324_07.fca.1.4.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.3.1.insert", i1 %.fca.1.4.0.extract, 1, 4, 0
  %"324_07.fca.1.4.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.4.0.insert", i64 %.fca.1.4.1.extract, 1, 4, 1
  %"324_07.fca.1.5.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.4.1.insert", i1 %.fca.1.5.0.extract, 1, 5, 0
  %"324_07.fca.1.5.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.5.0.insert", i64 %.fca.1.5.1.extract, 1, 5, 1
  %"324_07.fca.1.6.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.5.1.insert", i1 %.fca.1.6.0.extract, 1, 6, 0
  %"324_07.fca.1.6.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.6.0.insert", i64 %.fca.1.6.1.extract, 1, 6, 1
  %"324_07.fca.1.7.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.6.1.insert", i1 %.fca.1.7.0.extract, 1, 7, 0
  %"324_07.fca.1.7.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.7.0.insert", i64 %.fca.1.7.1.extract, 1, 7, 1
  %"324_07.fca.1.8.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.7.1.insert", i1 %.fca.1.8.0.extract, 1, 8, 0
  %"324_07.fca.1.8.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.8.0.insert", i64 %.fca.1.8.1.extract, 1, 8, 1
  %"324_07.fca.1.9.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.8.1.insert", i1 %.fca.1.9.0.extract, 1, 9, 0
  %"324_07.fca.1.9.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.9.0.insert", i64 %.fca.1.9.1.extract, 1, 9, 1
  %"324_09.fca.1.0.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_07.fca.1.9.1.insert", i1 %.fca.1.0.0.extract, 1, 0, 0
  %"324_09.fca.1.0.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.0.0.insert", i64 %.fca.1.0.1.extract, 1, 0, 1
  %"324_09.fca.1.1.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.0.1.insert", i1 %.fca.1.1.0.extract, 1, 1, 0
  %"324_09.fca.1.1.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.1.0.insert", i64 %.fca.1.1.1.extract, 1, 1, 1
  %"324_09.fca.1.2.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.1.1.insert", i1 %.fca.1.2.0.extract, 1, 2, 0
  %"324_09.fca.1.2.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.2.0.insert", i64 %.fca.1.2.1.extract, 1, 2, 1
  %"324_09.fca.1.3.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.2.1.insert", i1 %.fca.1.3.0.extract, 1, 3, 0
  %"324_09.fca.1.3.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.3.0.insert", i64 %.fca.1.3.1.extract, 1, 3, 1
  %"324_09.fca.1.4.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.3.1.insert", i1 %.fca.1.4.0.extract, 1, 4, 0
  %"324_09.fca.1.4.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.4.0.insert", i64 %.fca.1.4.1.extract, 1, 4, 1
  %"324_09.fca.1.5.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.4.1.insert", i1 %.fca.1.5.0.extract, 1, 5, 0
  %"324_09.fca.1.5.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.5.0.insert", i64 %.fca.1.5.1.extract, 1, 5, 1
  %"324_09.fca.1.6.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.5.1.insert", i1 %.fca.1.6.0.extract, 1, 6, 0
  %"324_09.fca.1.6.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.6.0.insert", i64 %.fca.1.6.1.extract, 1, 6, 1
  %"324_09.fca.1.7.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.6.1.insert", i1 %.fca.1.7.0.extract, 1, 7, 0
  %"324_09.fca.1.7.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.7.0.insert", i64 %.fca.1.7.1.extract, 1, 7, 1
  %"324_09.fca.1.8.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.7.1.insert", i1 %.fca.1.8.0.extract, 1, 8, 0
  %"324_09.fca.1.8.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.8.0.insert", i64 %.fca.1.8.1.extract, 1, 8, 1
  %"324_09.fca.1.9.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.8.1.insert", i1 %.fca.1.9.0.extract, 1, 9, 0
  %"324_09.fca.1.9.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.9.0.insert", i64 %.fca.1.9.1.extract, 1, 9, 1
  %"010.fca.1.0.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"324_09.fca.1.9.1.insert", i1 %.fca.1.0.0.extract, 1, 0, 0
  %"010.fca.1.0.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.0.0.insert", i64 %.fca.1.0.1.extract, 1, 0, 1
  %"010.fca.1.1.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.0.1.insert", i1 %.fca.1.1.0.extract, 1, 1, 0
  %"010.fca.1.1.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.1.0.insert", i64 %.fca.1.1.1.extract, 1, 1, 1
  %"010.fca.1.2.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.1.1.insert", i1 %.fca.1.2.0.extract, 1, 2, 0
  %"010.fca.1.2.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.2.0.insert", i64 %.fca.1.2.1.extract, 1, 2, 1
  %"010.fca.1.3.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.2.1.insert", i1 %.fca.1.3.0.extract, 1, 3, 0
  %"010.fca.1.3.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.3.0.insert", i64 %.fca.1.3.1.extract, 1, 3, 1
  %"010.fca.1.4.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.3.1.insert", i1 %.fca.1.4.0.extract, 1, 4, 0
  %"010.fca.1.4.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.4.0.insert", i64 %.fca.1.4.1.extract, 1, 4, 1
  %"010.fca.1.5.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.4.1.insert", i1 %.fca.1.5.0.extract, 1, 5, 0
  %"010.fca.1.5.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.5.0.insert", i64 %.fca.1.5.1.extract, 1, 5, 1
  %"010.fca.1.6.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.5.1.insert", i1 %.fca.1.6.0.extract, 1, 6, 0
  %"010.fca.1.6.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.6.0.insert", i64 %.fca.1.6.1.extract, 1, 6, 1
  %"010.fca.1.7.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.6.1.insert", i1 %.fca.1.7.0.extract, 1, 7, 0
  %"010.fca.1.7.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.7.0.insert", i64 %.fca.1.7.1.extract, 1, 7, 1
  %"010.fca.1.8.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.7.1.insert", i1 %.fca.1.8.0.extract, 1, 8, 0
  %"010.fca.1.8.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.8.0.insert", i64 %.fca.1.8.1.extract, 1, 8, 1
  %"010.fca.1.9.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.8.1.insert", i1 %.fca.1.9.0.extract, 1, 9, 0
  %"010.fca.1.9.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.9.0.insert", i64 %.fca.1.9.1.extract, 1, 9, 1
  %"318_011.fca.1.0.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"010.fca.1.9.1.insert", i1 %.fca.1.0.0.extract, 1, 0, 0
  %"318_011.fca.1.0.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.0.0.insert", i64 %.fca.1.0.1.extract, 1, 0, 1
  %"318_011.fca.1.1.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.0.1.insert", i1 %.fca.1.1.0.extract, 1, 1, 0
  %"318_011.fca.1.1.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.1.0.insert", i64 %.fca.1.1.1.extract, 1, 1, 1
  %"318_011.fca.1.2.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.1.1.insert", i1 %.fca.1.2.0.extract, 1, 2, 0
  %"318_011.fca.1.2.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.2.0.insert", i64 %.fca.1.2.1.extract, 1, 2, 1
  %"318_011.fca.1.3.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.2.1.insert", i1 %.fca.1.3.0.extract, 1, 3, 0
  %"318_011.fca.1.3.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.3.0.insert", i64 %.fca.1.3.1.extract, 1, 3, 1
  %"318_011.fca.1.4.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.3.1.insert", i1 %.fca.1.4.0.extract, 1, 4, 0
  %"318_011.fca.1.4.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.4.0.insert", i64 %.fca.1.4.1.extract, 1, 4, 1
  %"318_011.fca.1.5.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.4.1.insert", i1 %.fca.1.5.0.extract, 1, 5, 0
  %"318_011.fca.1.5.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.5.0.insert", i64 %.fca.1.5.1.extract, 1, 5, 1
  %"318_011.fca.1.6.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.5.1.insert", i1 %.fca.1.6.0.extract, 1, 6, 0
  %"318_011.fca.1.6.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.6.0.insert", i64 %.fca.1.6.1.extract, 1, 6, 1
  %"318_011.fca.1.7.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.6.1.insert", i1 %.fca.1.7.0.extract, 1, 7, 0
  %"318_011.fca.1.7.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.7.0.insert", i64 %.fca.1.7.1.extract, 1, 7, 1
  %"318_011.fca.1.8.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.7.1.insert", i1 %.fca.1.8.0.extract, 1, 8, 0
  %"318_011.fca.1.8.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.8.0.insert", i64 %.fca.1.8.1.extract, 1, 8, 1
  %"318_011.fca.1.9.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.8.1.insert", i1 %.fca.1.9.0.extract, 1, 9, 0
  %"318_011.fca.1.9.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.9.0.insert", i64 %.fca.1.9.1.extract, 1, 9, 1
  %"012.fca.1.0.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"318_011.fca.1.9.1.insert", i1 %.fca.1.0.0.extract, 1, 0, 0
  %"012.fca.1.0.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"012.fca.1.0.0.insert", i64 %.fca.1.0.1.extract, 1, 0, 1
  %"012.fca.1.1.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"012.fca.1.0.1.insert", i1 %.fca.1.1.0.extract, 1, 1, 0
  %"012.fca.1.1.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"012.fca.1.1.0.insert", i64 %.fca.1.1.1.extract, 1, 1, 1
  %"012.fca.1.2.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"012.fca.1.1.1.insert", i1 %.fca.1.2.0.extract, 1, 2, 0
  %"012.fca.1.2.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"012.fca.1.2.0.insert", i64 %.fca.1.2.1.extract, 1, 2, 1
  %"012.fca.1.3.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"012.fca.1.2.1.insert", i1 %.fca.1.3.0.extract, 1, 3, 0
  %"012.fca.1.3.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"012.fca.1.3.0.insert", i64 %.fca.1.3.1.extract, 1, 3, 1
  %"012.fca.1.4.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"012.fca.1.3.1.insert", i1 %.fca.1.4.0.extract, 1, 4, 0
  %"012.fca.1.4.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"012.fca.1.4.0.insert", i64 %.fca.1.4.1.extract, 1, 4, 1
  %"012.fca.1.5.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"012.fca.1.4.1.insert", i1 %.fca.1.5.0.extract, 1, 5, 0
  %"012.fca.1.5.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"012.fca.1.5.0.insert", i64 %.fca.1.5.1.extract, 1, 5, 1
  %"012.fca.1.6.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"012.fca.1.5.1.insert", i1 %.fca.1.6.0.extract, 1, 6, 0
  %"012.fca.1.6.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"012.fca.1.6.0.insert", i64 %.fca.1.6.1.extract, 1, 6, 1
  %"012.fca.1.7.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"012.fca.1.6.1.insert", i1 %.fca.1.7.0.extract, 1, 7, 0
  %"012.fca.1.7.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"012.fca.1.7.0.insert", i64 %.fca.1.7.1.extract, 1, 7, 1
  %"012.fca.1.8.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"012.fca.1.7.1.insert", i1 %.fca.1.8.0.extract, 1, 8, 0
  %"012.fca.1.8.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"012.fca.1.8.0.insert", i64 %.fca.1.8.1.extract, 1, 8, 1
  %"012.fca.1.9.0.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"012.fca.1.8.1.insert", i1 %.fca.1.9.0.extract, 1, 9, 0
  %"012.fca.1.9.1.insert" = insertvalue { i64, [10 x { i1, i64 }] } %"012.fca.1.9.0.insert", i64 %.fca.1.9.1.extract, 1, 9, 1
  ret { i64, [10 x { i1, i64 }] } %"012.fca.1.9.1.insert"
}

define { i1, { { i64, [10 x { i1, i64 }] }, i64 } } @"__hugr__.$__next__$$t(qubit)$n(10).339"({ i64, [10 x { i1, i64 }] } %0) local_unnamed_addr {
alloca_block:
  %.fca.0.extract217 = extractvalue { i64, [10 x { i1, i64 }] } %0, 0
  %1 = extractvalue { i64, [10 x { i1, i64 }] } %0, 1
  %2 = icmp slt i64 %.fca.0.extract217, 10
  br i1 %2, label %6, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit"

.loopexit:                                        ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9", %6
  %"02.sroa.3.0" = phi i64 [ %7, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.6.0" = phi i1 [ %.fca.1.0.0.extract74, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.9.0" = phi i64 [ %.fca.1.0.1.extract75, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.12.0" = phi i1 [ %.fca.1.1.0.extract76, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.15.0" = phi i64 [ %.fca.1.1.1.extract77, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.18.0" = phi i1 [ %.fca.1.2.0.extract78, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.21.0" = phi i64 [ %.fca.1.2.1.extract79, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.24.0" = phi i1 [ %.fca.1.3.0.extract80, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.27.0" = phi i64 [ %.fca.1.3.1.extract81, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.30.0" = phi i1 [ %.fca.1.4.0.extract82, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.33.0" = phi i64 [ %.fca.1.4.1.extract83, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.36.0" = phi i1 [ %.fca.1.5.0.extract84, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.39.0" = phi i64 [ %.fca.1.5.1.extract85, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.42.0" = phi i1 [ %.fca.1.6.0.extract86, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.45.0" = phi i64 [ %.fca.1.6.1.extract87, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.48.0" = phi i1 [ %.fca.1.7.0.extract88, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.51.0" = phi i64 [ %.fca.1.7.1.extract89, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.54.0" = phi i1 [ %.fca.1.8.0.extract90, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.57.0" = phi i64 [ %.fca.1.8.1.extract91, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.60.0" = phi i1 [ %.fca.1.9.0.extract92, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.63.0" = phi i64 [ %.fca.1.9.1.extract93, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"02.sroa.66.0" = phi i64 [ %9, %6 ], [ poison, %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9" ]
  %"029.fca.0.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } poison, i1 %2, 0
  %"029.fca.1.0.0.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.0.insert", i64 %"02.sroa.3.0", 1, 0, 0
  %"029.fca.1.0.1.0.0.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.0.insert", i1 %"02.sroa.6.0", 1, 0, 1, 0, 0
  %"029.fca.1.0.1.0.1.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.0.0.insert", i64 %"02.sroa.9.0", 1, 0, 1, 0, 1
  %"029.fca.1.0.1.1.0.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.0.1.insert", i1 %"02.sroa.12.0", 1, 0, 1, 1, 0
  %"029.fca.1.0.1.1.1.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.1.0.insert", i64 %"02.sroa.15.0", 1, 0, 1, 1, 1
  %"029.fca.1.0.1.2.0.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.1.1.insert", i1 %"02.sroa.18.0", 1, 0, 1, 2, 0
  %"029.fca.1.0.1.2.1.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.2.0.insert", i64 %"02.sroa.21.0", 1, 0, 1, 2, 1
  %"029.fca.1.0.1.3.0.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.2.1.insert", i1 %"02.sroa.24.0", 1, 0, 1, 3, 0
  %"029.fca.1.0.1.3.1.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.3.0.insert", i64 %"02.sroa.27.0", 1, 0, 1, 3, 1
  %"029.fca.1.0.1.4.0.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.3.1.insert", i1 %"02.sroa.30.0", 1, 0, 1, 4, 0
  %"029.fca.1.0.1.4.1.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.4.0.insert", i64 %"02.sroa.33.0", 1, 0, 1, 4, 1
  %"029.fca.1.0.1.5.0.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.4.1.insert", i1 %"02.sroa.36.0", 1, 0, 1, 5, 0
  %"029.fca.1.0.1.5.1.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.5.0.insert", i64 %"02.sroa.39.0", 1, 0, 1, 5, 1
  %"029.fca.1.0.1.6.0.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.5.1.insert", i1 %"02.sroa.42.0", 1, 0, 1, 6, 0
  %"029.fca.1.0.1.6.1.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.6.0.insert", i64 %"02.sroa.45.0", 1, 0, 1, 6, 1
  %"029.fca.1.0.1.7.0.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.6.1.insert", i1 %"02.sroa.48.0", 1, 0, 1, 7, 0
  %"029.fca.1.0.1.7.1.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.7.0.insert", i64 %"02.sroa.51.0", 1, 0, 1, 7, 1
  %"029.fca.1.0.1.8.0.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.7.1.insert", i1 %"02.sroa.54.0", 1, 0, 1, 8, 0
  %"029.fca.1.0.1.8.1.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.8.0.insert", i64 %"02.sroa.57.0", 1, 0, 1, 8, 1
  %"029.fca.1.0.1.9.0.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.8.1.insert", i1 %"02.sroa.60.0", 1, 0, 1, 9, 0
  %"029.fca.1.0.1.9.1.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.9.0.insert", i64 %"02.sroa.63.0", 1, 0, 1, 9, 1
  %"029.fca.1.1.insert" = insertvalue { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.0.1.9.1.insert", i64 %"02.sroa.66.0", 1, 1
  ret { i1, { { i64, [10 x { i1, i64 }] }, i64 } } %"029.fca.1.1.insert"

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit": ; preds = %alloca_block
  %3 = alloca [10 x { i1, i64 }], align 8
  %.repack = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 0
  %.elt = extractvalue [10 x { i1, i64 }] %1, 0
  store { i1, i64 } %.elt, { i1, i64 }* %.repack, align 8
  %.repack238 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 1
  %.elt239 = extractvalue [10 x { i1, i64 }] %1, 1
  store { i1, i64 } %.elt239, { i1, i64 }* %.repack238, align 8
  %.repack240 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 2
  %.elt241 = extractvalue [10 x { i1, i64 }] %1, 2
  store { i1, i64 } %.elt241, { i1, i64 }* %.repack240, align 8
  %.repack242 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 3
  %.elt243 = extractvalue [10 x { i1, i64 }] %1, 3
  store { i1, i64 } %.elt243, { i1, i64 }* %.repack242, align 8
  %.repack244 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 4
  %.elt245 = extractvalue [10 x { i1, i64 }] %1, 4
  store { i1, i64 } %.elt245, { i1, i64 }* %.repack244, align 8
  %.repack246 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 5
  %.elt247 = extractvalue [10 x { i1, i64 }] %1, 5
  store { i1, i64 } %.elt247, { i1, i64 }* %.repack246, align 8
  %.repack248 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 6
  %.elt249 = extractvalue [10 x { i1, i64 }] %1, 6
  store { i1, i64 } %.elt249, { i1, i64 }* %.repack248, align 8
  %.repack250 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 7
  %.elt251 = extractvalue [10 x { i1, i64 }] %1, 7
  store { i1, i64 } %.elt251, { i1, i64 }* %.repack250, align 8
  %.repack252 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 8
  %.elt253 = extractvalue [10 x { i1, i64 }] %1, 8
  store { i1, i64 } %.elt253, { i1, i64 }* %.repack252, align 8
  %.repack254 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 9
  %.elt255 = extractvalue [10 x { i1, i64 }] %1, 9
  store { i1, i64 } %.elt255, { i1, i64 }* %.repack254, align 8
  %4 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 0, i32 0
  %5 = load i1, i1* %4, align 8
  br i1 %5, label %cond_398_case_1.i, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.1"

6:                                                ; preds = %alloca_block
  %7 = add nsw i64 %.fca.0.extract217, 1
  %8 = tail call { i64, [10 x { i1, i64 }] } @"__hugr__.$array.__getitem__.linear.2$$t(qubit)$n(10).357"([10 x { i1, i64 }] %1, i64 %.fca.0.extract217)
  %9 = extractvalue { i64, [10 x { i1, i64 }] } %8, 0
  %.fca.1.0.0.extract74 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 0, 0
  %.fca.1.0.1.extract75 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 0, 1
  %.fca.1.1.0.extract76 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 1, 0
  %.fca.1.1.1.extract77 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 1, 1
  %.fca.1.2.0.extract78 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 2, 0
  %.fca.1.2.1.extract79 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 2, 1
  %.fca.1.3.0.extract80 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 3, 0
  %.fca.1.3.1.extract81 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 3, 1
  %.fca.1.4.0.extract82 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 4, 0
  %.fca.1.4.1.extract83 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 4, 1
  %.fca.1.5.0.extract84 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 5, 0
  %.fca.1.5.1.extract85 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 5, 1
  %.fca.1.6.0.extract86 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 6, 0
  %.fca.1.6.1.extract87 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 6, 1
  %.fca.1.7.0.extract88 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 7, 0
  %.fca.1.7.1.extract89 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 7, 1
  %.fca.1.8.0.extract90 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 8, 0
  %.fca.1.8.1.extract91 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 8, 1
  %.fca.1.9.0.extract92 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 9, 0
  %.fca.1.9.1.extract93 = extractvalue { i64, [10 x { i1, i64 }] } %8, 1, 9, 1
  br label %.loopexit

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.1": ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit"
  %10 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 1, i32 0
  %11 = load i1, i1* %10, align 8
  br i1 %11, label %cond_398_case_1.i, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.2"

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.2": ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.1"
  %12 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 2, i32 0
  %13 = load i1, i1* %12, align 8
  br i1 %13, label %cond_398_case_1.i, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.3"

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.3": ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.2"
  %14 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 3, i32 0
  %15 = load i1, i1* %14, align 8
  br i1 %15, label %cond_398_case_1.i, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.4"

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.4": ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.3"
  %16 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 4, i32 0
  %17 = load i1, i1* %16, align 8
  br i1 %17, label %cond_398_case_1.i, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.5"

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.5": ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.4"
  %18 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 5, i32 0
  %19 = load i1, i1* %18, align 8
  br i1 %19, label %cond_398_case_1.i, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.6"

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.6": ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.5"
  %20 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 6, i32 0
  %21 = load i1, i1* %20, align 8
  br i1 %21, label %cond_398_case_1.i, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.7"

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.7": ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.6"
  %22 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 7, i32 0
  %23 = load i1, i1* %22, align 8
  br i1 %23, label %cond_398_case_1.i, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.8"

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.8": ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.7"
  %24 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 8, i32 0
  %25 = load i1, i1* %24, align 8
  br i1 %25, label %cond_398_case_1.i, label %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9"

"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9": ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.8"
  %26 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 9, i32 0
  %27 = load i1, i1* %26, align 8
  br i1 %27, label %cond_398_case_1.i, label %.loopexit

cond_398_case_1.i:                                ; preds = %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.9", %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.8", %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.7", %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.6", %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.5", %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.4", %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.3", %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.2", %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit.1", %"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395.exit"
  tail call void @panic(i32 1001, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @e_ArrayIter..ED8B8605.0, i64 0, i64 0))
  unreachable
}

declare void @___qfree(i64) local_unnamed_addr

define { i64, [10 x { i1, i64 }] } @"__hugr__.$array.__getitem__.linear.2$$t(qubit)$n(10).357"([10 x { i1, i64 }] %0, i64 %1) local_unnamed_addr {
alloca_block:
  %2 = icmp ult i64 %1, 10
  br i1 %2, label %cond_363_case_1, label %cond_363_case_0

cond_363_case_0:                                  ; preds = %alloca_block
  tail call void @panic(i32 1001, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @"e_Array inde.2A1CB845.0", i64 0, i64 0))
  unreachable

cond_363_case_1:                                  ; preds = %alloca_block
  %3 = alloca [10 x { i1, i64 }], align 8
  %.repack = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 0
  %.elt = extractvalue [10 x { i1, i64 }] %0, 0
  store { i1, i64 } %.elt, { i1, i64 }* %.repack, align 8
  %.repack133 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 1
  %.elt134 = extractvalue [10 x { i1, i64 }] %0, 1
  store { i1, i64 } %.elt134, { i1, i64 }* %.repack133, align 8
  %.repack135 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 2
  %.elt136 = extractvalue [10 x { i1, i64 }] %0, 2
  store { i1, i64 } %.elt136, { i1, i64 }* %.repack135, align 8
  %.repack137 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 3
  %.elt138 = extractvalue [10 x { i1, i64 }] %0, 3
  store { i1, i64 } %.elt138, { i1, i64 }* %.repack137, align 8
  %.repack139 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 4
  %.elt140 = extractvalue [10 x { i1, i64 }] %0, 4
  store { i1, i64 } %.elt140, { i1, i64 }* %.repack139, align 8
  %.repack141 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 5
  %.elt142 = extractvalue [10 x { i1, i64 }] %0, 5
  store { i1, i64 } %.elt142, { i1, i64 }* %.repack141, align 8
  %.repack143 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 6
  %.elt144 = extractvalue [10 x { i1, i64 }] %0, 6
  store { i1, i64 } %.elt144, { i1, i64 }* %.repack143, align 8
  %.repack145 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 7
  %.elt146 = extractvalue [10 x { i1, i64 }] %0, 7
  store { i1, i64 } %.elt146, { i1, i64 }* %.repack145, align 8
  %.repack147 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 8
  %.elt148 = extractvalue [10 x { i1, i64 }] %0, 8
  store { i1, i64 } %.elt148, { i1, i64 }* %.repack147, align 8
  %.repack149 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 9
  %.elt150 = extractvalue [10 x { i1, i64 }] %0, 9
  store { i1, i64 } %.elt150, { i1, i64 }* %.repack149, align 8
  %4 = getelementptr inbounds [10 x { i1, i64 }], [10 x { i1, i64 }]* %3, i64 0, i64 %1
  %5 = load { i1, i64 }, { i1, i64 }* %4, align 8
  %6 = bitcast { i1, i64 }* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %6, i8 0, i64 16, i1 false)
  %.unpack = load { i1, i64 }, { i1, i64 }* %.repack, align 8
  %.unpack153 = load { i1, i64 }, { i1, i64 }* %.repack133, align 8
  %.unpack155 = load { i1, i64 }, { i1, i64 }* %.repack135, align 8
  %.unpack157 = load { i1, i64 }, { i1, i64 }* %.repack137, align 8
  %.unpack159 = load { i1, i64 }, { i1, i64 }* %.repack139, align 8
  %.unpack161 = load { i1, i64 }, { i1, i64 }* %.repack141, align 8
  %.unpack163 = load { i1, i64 }, { i1, i64 }* %.repack143, align 8
  %.unpack165 = load { i1, i64 }, { i1, i64 }* %.repack145, align 8
  %.unpack167 = load { i1, i64 }, { i1, i64 }* %.repack147, align 8
  %.unpack169 = load { i1, i64 }, { i1, i64 }* %.repack149, align 8
  %.fca.1.0.extract65 = extractvalue { i1, i64 } %5, 0
  br i1 %.fca.1.0.extract65, label %cond_372_case_1, label %cond_372_case_0

cond_372_case_1:                                  ; preds = %cond_363_case_1
  %.fca.2.9.1.extract = extractvalue { i1, i64 } %.unpack169, 1
  %.fca.2.9.0.extract = extractvalue { i1, i64 } %.unpack169, 0
  %.fca.2.8.1.extract = extractvalue { i1, i64 } %.unpack167, 1
  %.fca.2.8.0.extract = extractvalue { i1, i64 } %.unpack167, 0
  %.fca.2.7.1.extract = extractvalue { i1, i64 } %.unpack165, 1
  %.fca.2.7.0.extract = extractvalue { i1, i64 } %.unpack165, 0
  %.fca.2.6.1.extract = extractvalue { i1, i64 } %.unpack163, 1
  %.fca.2.6.0.extract = extractvalue { i1, i64 } %.unpack163, 0
  %.fca.2.5.1.extract = extractvalue { i1, i64 } %.unpack161, 1
  %.fca.2.5.0.extract = extractvalue { i1, i64 } %.unpack161, 0
  %.fca.2.4.1.extract = extractvalue { i1, i64 } %.unpack159, 1
  %.fca.2.4.0.extract = extractvalue { i1, i64 } %.unpack159, 0
  %.fca.2.3.1.extract = extractvalue { i1, i64 } %.unpack157, 1
  %.fca.2.3.0.extract = extractvalue { i1, i64 } %.unpack157, 0
  %.fca.2.2.1.extract = extractvalue { i1, i64 } %.unpack155, 1
  %.fca.2.2.0.extract = extractvalue { i1, i64 } %.unpack155, 0
  %.fca.2.1.1.extract = extractvalue { i1, i64 } %.unpack153, 1
  %.fca.2.1.0.extract = extractvalue { i1, i64 } %.unpack153, 0
  %.fca.2.0.1.extract = extractvalue { i1, i64 } %.unpack, 1
  %.fca.2.0.0.extract = extractvalue { i1, i64 } %.unpack, 0
  %.fca.1.1.extract66 = extractvalue { i1, i64 } %5, 1
  %7 = insertvalue [10 x { i1, i64 }] poison, i1 %.fca.2.0.0.extract, 0, 0
  %8 = insertvalue [10 x { i1, i64 }] %7, i64 %.fca.2.0.1.extract, 0, 1
  %9 = insertvalue [10 x { i1, i64 }] %8, i1 %.fca.2.1.0.extract, 1, 0
  %10 = insertvalue [10 x { i1, i64 }] %9, i64 %.fca.2.1.1.extract, 1, 1
  %11 = insertvalue [10 x { i1, i64 }] %10, i1 %.fca.2.2.0.extract, 2, 0
  %12 = insertvalue [10 x { i1, i64 }] %11, i64 %.fca.2.2.1.extract, 2, 1
  %13 = insertvalue [10 x { i1, i64 }] %12, i1 %.fca.2.3.0.extract, 3, 0
  %14 = insertvalue [10 x { i1, i64 }] %13, i64 %.fca.2.3.1.extract, 3, 1
  %15 = insertvalue [10 x { i1, i64 }] %14, i1 %.fca.2.4.0.extract, 4, 0
  %16 = insertvalue [10 x { i1, i64 }] %15, i64 %.fca.2.4.1.extract, 4, 1
  %17 = insertvalue [10 x { i1, i64 }] %16, i1 %.fca.2.5.0.extract, 5, 0
  %18 = insertvalue [10 x { i1, i64 }] %17, i64 %.fca.2.5.1.extract, 5, 1
  %19 = insertvalue [10 x { i1, i64 }] %18, i1 %.fca.2.6.0.extract, 6, 0
  %20 = insertvalue [10 x { i1, i64 }] %19, i64 %.fca.2.6.1.extract, 6, 1
  %21 = insertvalue [10 x { i1, i64 }] %20, i1 %.fca.2.7.0.extract, 7, 0
  %22 = insertvalue [10 x { i1, i64 }] %21, i64 %.fca.2.7.1.extract, 7, 1
  %23 = insertvalue [10 x { i1, i64 }] %22, i1 %.fca.2.8.0.extract, 8, 0
  %24 = insertvalue [10 x { i1, i64 }] %23, i64 %.fca.2.8.1.extract, 8, 1
  %25 = insertvalue [10 x { i1, i64 }] %24, i1 %.fca.2.9.0.extract, 9, 0
  %26 = insertvalue [10 x { i1, i64 }] %25, i64 %.fca.2.9.1.extract, 9, 1
  %mrv = insertvalue { i64, [10 x { i1, i64 }] } undef, i64 %.fca.1.1.extract66, 0
  %mrv40 = insertvalue { i64, [10 x { i1, i64 }] } %mrv, [10 x { i1, i64 }] %26, 1
  ret { i64, [10 x { i1, i64 }] } %mrv40

cond_372_case_0:                                  ; preds = %cond_363_case_1
  tail call void @panic(i32 1001, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @"e_Linear arr.27F92A51.0", i64 0, i64 0))
  unreachable
}

define {} @"__hugr__.$ArrayIter._assert_all_used.helper.5$$t(qubit).395"({ i1, i64 } %0) local_unnamed_addr {
alloca_block:
  %.fca.0.extract = extractvalue { i1, i64 } %0, 0
  br i1 %.fca.0.extract, label %cond_398_case_1, label %cond_exit_398

cond_398_case_1:                                  ; preds = %alloca_block
  tail call void @panic(i32 1001, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @e_ArrayIter..ED8B8605.0, i64 0, i64 0))
  unreachable

cond_exit_398:                                    ; preds = %alloca_block
  ret {} undef
}

declare i64 @___qalloc() local_unnamed_addr

declare void @___reset(i64) local_unnamed_addr

define i64 @qmain(i64 %0) local_unnamed_addr {
entry:
  tail call void @setup(i64 %0)
  tail call void @__hugr__.main.1()
  %1 = tail call i64 @teardown()
  ret i64 %1
}

declare void @setup(i64) local_unnamed_addr

declare i64 @teardown() local_unnamed_addr

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { mustprogress nofree norecurse nosync nounwind readnone willreturn }
attributes #1 = { noreturn }
attributes #2 = { argmemonly nofree nounwind willreturn writeonly }

!name = !{!0}

!0 = !{!"mainlib"}
