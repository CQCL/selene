name: Build wheels Release

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - "*"
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

env:
  CARGO_TERM_COLOR: always
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CACHE_CARGO: true
jobs:
  build_selene_core:
    runs-on: ubuntu-latest
    outputs:
      wheel-ready: ${{ steps.upload_selene_core.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache selene-core wheel
        id: selene_core_wheel_cache
        uses: actions/cache@v4
        with:
          path: wheelhouse/selene_core-*.whl
          key: selene-core-wheel-${{ hashFiles('selene-core/**') }}

      - name: Upload selene-core wheel (cached)
        if: steps.selene_core_wheel_cache.outputs.hit == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: selene-core
          path: wheelhouse/selene_core-*.whl
          if-no-files-found: error

      - uses: actions/cache@v4
        if: steps.selene_core_wheel_cache.outputs.cache-hit != 'true'
        with:
          path: |
            ~/.cargo/
            target/
          key: selene-core-ci

      - name: "Set up Python"
        if: steps.selene_core_wheel_cache.outputs.cache-hit != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install rust toolchain
        if: steps.selene_core_wheel_cache.outputs.cache-hit != 'true'
        uses: dtolnay/rust-toolchain@stable

      - name: Install cbindgen and cargo-expand
        if: steps.selene_core_wheel_cache.outputs.cache-hit != 'true'
        run: "cargo install --locked cbindgen cargo-expand"

      - name: Build selene-core wheel
        if: steps.selene_core_wheel_cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p wheelhouse
          python -m pip install --upgrade build
          python -m build --wheel --outdir wheelhouse selene-core

      - name: Upload selene-core wheel (built)
        if: steps.selene_core_wheel_cache.outputs.hit != 'true'
        id: upload_selene_core
        uses: actions/upload-artifact@v4
        with:
          name: selene-core
          path: wheelhouse/selene_core-*.whl
          if-no-files-found: error

  build_platform_specific_wheels:
    needs: build_selene_core
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-14, macos-13, windows-latest]
    name: "Selene wheels (${{matrix.os}})"
    runs-on: ${{ matrix.os }}
    steps:
      # ---------------------------------
      # Bootstrap the build environment
      # ---------------------------------
      
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up UV
        if: ${{ matrix.os != 'ubuntu-latest' }}
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          version: "0.6.6"

      - name: Prepare cache dir (linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          mkdir /tmp/ci-cache
          chmod 755 /tmp/ci-cache

      # ------------------------------------
      # Build or fetch the hugr_qis compiler
      # ------------------------------------
      # Building the hugr_qis compiler takes approximately 10
      # minutes at the time of writing. This can lead to slow
      # CI times if the compiler is built every time.
      #
      # As such, we use a cache to store the compiler wheel,
      # and only build it if the source code has changed.
      # ------------------------------------
      
      # fetch if the hugr_qis compiler has not changed, otherwise
      # set to update the cache.
      - name: Cache selene-hugr-qis-compiler wheel
        id: hugr_qis_cache
        uses: actions/cache@v4
        with:
          path: wheelhouse/selene_hugr_qis_compiler-*.whl
          key: selene-hugr-qis-compiler--wheel--${{ matrix.os }}--${{ hashFiles('selene-compilers/hugr_qis/**') }}

      # Note that we are using CIBuildWheel to build the wheels.
      # This treats linux differently to macos and windows.
      #
      # On linux, building on the host platform adds an implicit
      # requirement on the host platform's glibc version and other
      # system libraries that happen to be available. To mitigate
      # this, builds are performed within a docker container that
      # is compatible with manylinux (in our case, manylinux_2_28).
      #
      # See https://github.com/pypa/manylinux for more information
      # about the manylinux project.
      #
      # This is an important aspect of wheel building, as it means
      # that wheels are built in an isolated environment. We use
      # /tmp/ci-cache for caching, which is then accessed as
      # /host/tmp/ci-cache within the container.
      - uses: actions/cache@v4
        if: steps.hugr_qis_cache.outputs.cache-hit != 'true'
        with:
          path: |
            /tmp/ci-cache/hugr-qis
            selene-compilers/hugr_qis/target/
          key: selene-hugr-qis-compiler--build-env--${{ matrix.os }}--${{ hashFiles('selene-compilers/hugr_qis/Cargo.lock') }}
          restore-keys: |
            selene-hugr-qis-compiler--build-env--${{ matrix.os }}--


      # if the hugr_qis compiler has changed, we build it.
      - name: Build selene-hugr-qis-compiler wheel
        if: steps.hugr_qis_cache.outputs.cache-hit != 'true'
        uses: pypa/cibuildwheel@v2.21.3
        with:
          package-dir: selene-compilers/hugr_qis

      # --------------------------------
      # Find the hugr_qis compiler wheel
      # --------------------------------
      # We need to pass the path to the compiler wheel to CIBuildWheel
      # so that it can be pip installed within the CIBuildWheel environment
      # prior to testing selene-sim.
      #
      # We need the absolute path to the complete wheel name.
      # --------------------------------
      - name: Set compiler wheel path in environment
        shell: bash
        run: |
          wheel_files=$(ls wheelhouse/selene_hugr_qis_compiler-*.whl)
          wheel_file_abs=$(readlink -f "${wheel_files[0]}")

          # On Windows (GitHub runners), convert /c/... to C:/...
          case "$(uname -s)" in
            MINGW*|MSYS*|CYGWIN*)
              drive_letter=$(echo "$wheel_file_abs" | cut -d '/' -f 2)
              rest=$(echo "$wheel_file_abs" | cut -d '/' -f 3-)
              wheel_file_abs="${drive_letter^^}:/${rest}"
              ;;
          esac

          echo "Found compiler wheel: ${wheel_file_abs}"
          echo "SELENE_HUGR_QIS_WHL=${wheel_file_abs}" >> $GITHUB_ENV


      # ---------------------------------
      # Download and find selene-core wheel
      # ---------------------------------
      # We need the selene-core wheel to build selene-sim.
      # This is the selene-core wheel that was built in the
      # build_selene_core job.
      #
      # Selene-core is python-only, but isn't cheap to build
      # now that we're running cbindgen to extract the C API.
      # As such, we provide it as input to the selene-sim build.
      #
      # At present, selene_hugr_qis_compiler does not depend
      # on selene-core, so we don't need to provide selene-core
      # as input to it.

      - name: Download selene-core wheel
        uses: actions/download-artifact@v4
        with:
          name: selene-core
          path: wheelhouse

      - name: Set selene-core wheel path in environment
        shell: bash
        run: |
          wheel_files=(wheelhouse/selene_core-*.whl)
          wheel_file_abs=$(readlink -f "${wheel_files[0]}")

          # On Windows (GitHub runners), convert /c/... to C:/...
          case "$(uname -s)" in
            MINGW*|MSYS*|CYGWIN*)
              drive_letter=$(echo "$wheel_file_abs" | cut -d '/' -f 2)
              rest=$(echo "$wheel_file_abs" | cut -d '/' -f 3-)
              wheel_file_abs="${drive_letter^^}:/${rest}"
              ;;
          esac

          echo "Found selene-core wheel: ${wheel_file_abs}"
          echo "SELENE_CORE_WHL=${wheel_file_abs}" >> $GITHUB_ENV

      # --------------------------------
      # Build selene-sim wheel
      # --------------------------------
      # If selene-core has changed, or selene-hugr-qis-compiler has changed,
      # we will likely want to rebuild and test selene-sim. As such, no wheel
      # caching here.
      #
      # A later change may be to consider guppy->hugr->QIS->selene tests as
      # integration tests performed outside of the CIBuildWheel environment.
      # We can then just run "pure selene" tests, whatever they may look like,
      # within CIBuildWheel, and avoid rebuilding. For the time being,
      # guppy->hugr->QIS->selene tests are core to our selene testing strategy,
      # and are performed within CIBuildWheel to ensure that the tests succeed
      # on all compatible platforms.
      # --------------------------------

      # Cache the rust build intermediates
      - uses: actions/cache@v4
        with:
          path: |
            /tmp/ci-cache/selene
            target/
          key: selene-sim--build-env--${{ matrix.os }}--${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            selene-sim--build-env--${{ matrix.os }}--

      # Perform the selene-sim build
      - name: Build selene-sim wheels
        uses: pypa/cibuildwheel@v2.21.3

      - name: Remove python ABI tag
        # As we are shipping compiled libraries, Hatch assumes that we
        # depend on the python ABI (in this case, cpython 3.10).
        #
        # This is not the case: the libraries we ship are for system use.
        # As such, the cp310-cp310 restriction is unnecessary, and we can
        # rename to just py3-none for wider compatibility.
        shell: bash
        run: |
          for f in wheelhouse/selene_sim*.whl; do
            echo "Renaming $f"
            mv "$f" "${f/cp310-cp310/py3-none}"
          done

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: selene-wheels-${{ matrix.os }}
          path: wheelhouse/*.whl
          if-no-files-found: error
  
  release:
    name: Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build_selene_core, build_platform_specific_wheels]
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: wheelhouse
          merge-multiple: true
      - name: GH Release
        uses: softprops/action-gh-release@v2
        with:
          files: wheelhouse/*.whl
          generate_release_notes: true
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Install twine
        run: python -m pip install twine
      - name: Upload to pypi
        run: |
          twine upload --verbose --non-interactive wheelhouse/*.whl
